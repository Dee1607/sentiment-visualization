{"ast":null,"code":"import _classCallCheck from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/components/PieChart.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport \"./CanadaMap.css\";\nimport Province from \"./Province\";\nimport { withRouter } from \"react-router-dom\";\nimport DonutJSON from \"./PieChartData.json\";\nimport PieClass from \"./PieClass\";\nimport * as d3 from \"d3\";\nimport { scaleLinear } from \"d3-scale\";\nimport WordCloud from \"./WordCloud\";\nvar colors = ['red', 'blue', 'green'];\n\nvar PieChart = /*#__PURE__*/function (_Component) {\n  _inherits(PieChart, _Component);\n\n  var _super = _createSuper(PieChart);\n\n  function PieChart(props) {\n    var _this;\n\n    _classCallCheck(this, PieChart);\n\n    _this = _super.call(this, props);\n    _this.chRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(PieChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawChart();\n    }\n  }, {\n    key: \"drawChart\",\n    value: function drawChart() {\n      // Create dummy data\n      var data = DonutJSON;\n      var usableData = [];\n\n      for (var i = 0; i <= 15; i++) {\n        if (data[i]) {\n          if (data[i].location === this.props.location.state) {\n            usableData.push(data[i]);\n          }\n        }\n      }\n\n      console.log(usableData); // set the dimensions and margins of the graph\n\n      var width = 450,\n          height = 450,\n          margin = 40; // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n\n      var radius = Math.min(width, height) / 2 - margin; // append the svg object to the div called 'my_dataviz'\n\n      var svg = d3.select(this.chRef.current).append(\"svg\").attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", \"translate(\".concat(width / 2, \", \").concat(height / 2, \")\")); // Create dummy data\n      // const data = {a: 9, b: 20, c:30, d:8, e:12}\n      // set the color scale\n\n      var color = [\"#98abc5\", \"#8a89a6\", \"#7b6888\"]; // Compute the position of each group on the pie:\n\n      var pie = d3.pie().value(function (d) {\n        return d.Percentage;\n      });\n      var data_ready = pie(usableData);\n      console.log(data_ready); // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n\n      svg.selectAll('whatever').data(data_ready).join('path').attr('d', d3.arc().innerRadius(0).outerRadius(radius)).attr('fill', function (d) {\n        return colors[d.index];\n      }).attr(\"stroke\", \"black\").style(\"stroke-width\", \"2px\").style(\"opacity\", 0.7);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }\n      }, this.props.location.state), /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.chRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(WordCloud, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return PieChart;\n}(Component);\n\nexport default withRouter(PieChart);","map":{"version":3,"sources":["/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/components/PieChart.js"],"names":["React","Component","useState","useEffect","Province","withRouter","DonutJSON","PieClass","d3","scaleLinear","WordCloud","colors","PieChart","props","chRef","createRef","drawChart","data","usableData","i","location","state","push","console","log","width","height","margin","radius","Math","min","svg","select","current","append","attr","color","pie","value","d","Percentage","data_ready","selectAll","join","arc","innerRadius","outerRadius","index","style"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport \"./CanadaMap.css\";\nimport Province from \"./Province\";\nimport { withRouter } from \"react-router-dom\";\nimport DonutJSON from \"./PieChartData.json\";\nimport PieClass from \"./PieClass\";\nimport * as d3 from \"d3\";\nimport {scaleLinear} from \"d3-scale\";\nimport WordCloud from \"./WordCloud\";\n\nconst colors = [ 'red' , 'blue', 'green']\n\nclass PieChart extends Component {\n    \n  constructor(props) {\n    super(props);\n    this.chRef = React.createRef();\n  }\n\ncomponentDidMount(){\n    this.drawChart()\n}\n\ndrawChart(){\n    // Create dummy data\n\n    const data = DonutJSON;\n    let usableData = []\n    for(let i=0; i<=15; i++){\n        if(data[i]){\n            if(data[i].location === this.props.location.state){\n\n            usableData.push(data[i]);\n            }\n        }\n    }\n     console.log(usableData);\n    // set the dimensions and margins of the graph\n    var width = 450, height = 450, margin = 40\n\n// The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\nconst radius = Math.min(width, height) / 2 - margin;\n\n// append the svg object to the div called 'my_dataviz'\nconst svg = d3.select(this.chRef.current)\n  .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n  .append(\"g\")\n    .attr(\"transform\", `translate(${width/2}, ${height/2})`);\n\n// Create dummy data\n// const data = {a: 9, b: 20, c:30, d:8, e:12}\n\n// set the color scale\nconst color = [\"#98abc5\", \"#8a89a6\", \"#7b6888\"]\n// Compute the position of each group on the pie:\nconst pie = d3.pie()\n  .value(d => d.Percentage )  \nconst data_ready = pie(usableData)\nconsole.log(data_ready)\n\n// Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\nsvg\n  .selectAll('whatever')\n  .data(data_ready)\n  .join('path')\n  .attr('d', d3.arc()\n    .innerRadius(0)\n    .outerRadius(radius)\n  )\n  .attr('fill', (d) =>  colors[d.index])\n  .attr(\"stroke\", \"black\")\n  .style(\"stroke-width\", \"2px\")\n  .style(\"opacity\", 0.7)\n\n}\n\nrender() {\n    return (\n      <>\n        <h1>{this.props.location.state}</h1>\n        <div ref={this.chRef}></div>\n        <WordCloud />\n        {/* <script src=\"https://d3js.org/d3.v6.js\"></script>\n        <script src=\"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3/dist/d3.js\"></script>\n        <script src=\"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3moji/d3moji.js\"></script> */}\n      </>\n    );\n  }\n}\n\nexport default withRouter(PieChart);\n"]},"metadata":{},"sourceType":"module"}