{"ast":null,"code":"import _classCallCheck from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/components/WordCloud.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport \"./CanadaMap.css\";\nimport Province from \"./Province\";\nimport { withRouter } from \"react-router-dom\";\nimport DonutJSON from \"./PieChartData.json\";\nimport PieClass from \"./PieClass\";\nimport * as d3 from \"d3\";\nimport { scaleLinear } from \"d3-scale\";\nvar colors = ['red', 'blue', 'green'];\n\nvar WordCloud = /*#__PURE__*/function (_Component) {\n  _inherits(WordCloud, _Component);\n\n  var _super = _createSuper(WordCloud);\n\n  function WordCloud(props) {\n    var _this;\n\n    _classCallCheck(this, WordCloud);\n\n    _this = _super.call(this, props);\n    _this.chRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(WordCloud, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawChart();\n    }\n  }, {\n    key: \"drawChart\",\n    value: function drawChart() {\n      var myWords = [\"Hello\", \"Everybody\", \"How\", \"Are\", \"You\", \"Today\", \"It\", \"Is\", \"A\", \"Lovely\", \"Day\", \"I\", \"Love\", \"Coding\", \"In\", \"My\", \"Van\", \"Mate\"]; // set the dimensions and margins of the graph\n\n      var margin = {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10\n      },\n          width = 450 - margin.left - margin.right,\n          height = 450 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n      var svg = d3.select(this.chRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); // Constructs a new cloud layout instance. It run an algorithm to find the position of words that suits your requirements\n\n      var layout = d3.layout.cloud().size([width, height]).words(myWords.map(function (d) {\n        return {\n          text: d\n        };\n      })).padding(10).fontSize(60).on(\"end\", draw);\n      layout.start(); // This function takes the output of 'layout' above and draw the words\n      // Better not to touch it. To change parameters, play with the 'layout' variable above\n\n      function draw(words) {\n        svg.append(\"g\").attr(\"transform\", \"translate(\" + layout.size()[0] / 2 + \",\" + layout.size()[1] / 2 + \")\").selectAll(\"text\").data(words).enter().append(\"text\").style(\"font-size\", function (d) {\n          return d.size + \"px\";\n        }).attr(\"text-anchor\", \"middle\").attr(\"transform\", function (d) {\n          return \"translate(\" + [d.x, d.y] + \")rotate(\" + d.rotate + \")\";\n        }).text(function (d) {\n          return d.text;\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }\n      }, this.props.location.state), /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.chRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return WordCloud;\n}(Component);\n\nexport default withRouter(WordCloud);","map":{"version":3,"sources":["/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/components/WordCloud.js"],"names":["React","Component","useState","useEffect","Province","withRouter","DonutJSON","PieClass","d3","scaleLinear","colors","WordCloud","props","chRef","createRef","drawChart","myWords","margin","top","right","bottom","left","width","height","svg","select","current","append","attr","layout","cloud","size","words","map","d","text","padding","fontSize","on","draw","start","selectAll","data","enter","style","x","y","rotate","location","state"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,OAAO,iBAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAAQC,WAAR,QAA0B,UAA1B;AAEA,IAAMC,MAAM,GAAG,CAAE,KAAF,EAAU,MAAV,EAAkB,OAAlB,CAAf;;IAEMC,S;;;;;AAEJ,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAab,KAAK,CAACc,SAAN,EAAb;AAFiB;AAGlB;;;;WAEC,6BAAmB;AACf,WAAKC,SAAL;AACH;;;WAED,qBAAW;AACP,UAAIC,OAAO,GAAG,CAAC,OAAD,EAAU,WAAV,EAAuB,KAAvB,EAA8B,KAA9B,EAAqC,KAArC,EAA4C,OAA5C,EAAqD,IAArD,EAA2D,IAA3D,EAAiE,GAAjE,EAAsE,QAAtE,EAAgF,KAAhF,EAAuF,GAAvF,EAA4F,MAA5F,EAAoG,QAApG,EAA8G,IAA9G,EAAoH,IAApH,EAA0H,KAA1H,EAAiI,MAAjI,CAAd,CADO,CAGP;;AACA,UAAIC,MAAM,GAAG;AAACC,QAAAA,GAAG,EAAE,EAAN;AAAUC,QAAAA,KAAK,EAAE,EAAjB;AAAqBC,QAAAA,MAAM,EAAE,EAA7B;AAAiCC,QAAAA,IAAI,EAAE;AAAvC,OAAb;AAAA,UACIC,KAAK,GAAG,MAAML,MAAM,CAACI,IAAb,GAAoBJ,MAAM,CAACE,KADvC;AAAA,UAEII,MAAM,GAAG,MAAMN,MAAM,CAACC,GAAb,GAAmBD,MAAM,CAACG,MAFvC,CAJO,CAQP;;AACA,UAAII,GAAG,GAAGhB,EAAE,CAACiB,MAAH,CAAU,KAAKZ,KAAL,CAAWa,OAArB,EAA8BC,MAA9B,CAAqC,KAArC,EACLC,IADK,CACA,OADA,EACSN,KAAK,GAAGL,MAAM,CAACI,IAAf,GAAsBJ,MAAM,CAACE,KADtC,EAELS,IAFK,CAEA,QAFA,EAEUL,MAAM,GAAGN,MAAM,CAACC,GAAhB,GAAsBD,MAAM,CAACG,MAFvC,EAGTO,MAHS,CAGF,GAHE,EAILC,IAJK,CAIA,WAJA,EAKF,eAAeX,MAAM,CAACI,IAAtB,GAA6B,GAA7B,GAAmCJ,MAAM,CAACC,GAA1C,GAAgD,GAL9C,CAAV,CATO,CAgBP;;AACA,UAAIW,MAAM,GAAGrB,EAAE,CAACqB,MAAH,CAAUC,KAAV,GACZC,IADY,CACP,CAACT,KAAD,EAAQC,MAAR,CADO,EAEZS,KAFY,CAENhB,OAAO,CAACiB,GAAR,CAAY,UAASC,CAAT,EAAY;AAAE,eAAO;AAACC,UAAAA,IAAI,EAAED;AAAP,SAAP;AAAmB,OAA7C,CAFM,EAGZE,OAHY,CAGJ,EAHI,EAIZC,QAJY,CAIH,EAJG,EAKZC,EALY,CAKT,KALS,EAKFC,IALE,CAAb;AAMAV,MAAAA,MAAM,CAACW,KAAP,GAvBO,CAyBP;AACA;;AACA,eAASD,IAAT,CAAcP,KAAd,EAAqB;AACrBR,QAAAA,GAAG,CACEG,MADL,CACY,GADZ,EAEKC,IAFL,CAEU,WAFV,EAEuB,eAAeC,MAAM,CAACE,IAAP,GAAc,CAAd,IAAmB,CAAlC,GAAsC,GAAtC,GAA4CF,MAAM,CAACE,IAAP,GAAc,CAAd,IAAmB,CAA/D,GAAmE,GAF1F,EAGKU,SAHL,CAGe,MAHf,EAISC,IAJT,CAIcV,KAJd,EAKKW,KALL,GAKahB,MALb,CAKoB,MALpB,EAMSiB,KANT,CAMe,WANf,EAM4B,UAASV,CAAT,EAAY;AAAE,iBAAOA,CAAC,CAACH,IAAF,GAAS,IAAhB;AAAuB,SANjE,EAOSH,IAPT,CAOc,aAPd,EAO6B,QAP7B,EAQSA,IART,CAQc,WARd,EAQ2B,UAASM,CAAT,EAAY;AAC/B,iBAAO,eAAe,CAACA,CAAC,CAACW,CAAH,EAAMX,CAAC,CAACY,CAAR,CAAf,GAA4B,UAA5B,GAAyCZ,CAAC,CAACa,MAA3C,GAAoD,GAA3D;AACC,SAVT,EAWSZ,IAXT,CAWc,UAASD,CAAT,EAAY;AAAE,iBAAOA,CAAC,CAACC,IAAT;AAAgB,SAX5C;AAYC;AAEJ;;;WACD,kBAAS;AACL,0BACE,uDACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKvB,KAAL,CAAWoC,QAAX,CAAoBC,KAAzB,CADF,eAEE;AAAK,QAAA,GAAG,EAAE,KAAKpC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAMH;;;;EA7DmBZ,S;;AA+DxB,eAAeI,UAAU,CAACM,SAAD,CAAzB","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport \"./CanadaMap.css\";\nimport Province from \"./Province\";\nimport { withRouter } from \"react-router-dom\";\nimport DonutJSON from \"./PieChartData.json\";\nimport PieClass from \"./PieClass\";\nimport * as d3 from \"d3\";\nimport {scaleLinear} from \"d3-scale\";\n\nconst colors = [ 'red' , 'blue', 'green']\n\nclass WordCloud extends Component {\n    \n  constructor(props) {\n    super(props);\n    this.chRef = React.createRef();\n  }\n\n    componentDidMount(){\n        this.drawChart()\n    }\n\n    drawChart(){\n        var myWords = [\"Hello\", \"Everybody\", \"How\", \"Are\", \"You\", \"Today\", \"It\", \"Is\", \"A\", \"Lovely\", \"Day\", \"I\", \"Love\", \"Coding\", \"In\", \"My\", \"Van\", \"Mate\"]\n\n        // set the dimensions and margins of the graph\n        var margin = {top: 10, right: 10, bottom: 10, left: 10},\n            width = 450 - margin.left - margin.right,\n            height = 450 - margin.top - margin.bottom;\n\n        // append the svg object to the body of the page\n        var svg = d3.select(this.chRef.current).append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n            .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        // Constructs a new cloud layout instance. It run an algorithm to find the position of words that suits your requirements\n        var layout = d3.layout.cloud()\n        .size([width, height])\n        .words(myWords.map(function(d) { return {text: d}; }))\n        .padding(10)\n        .fontSize(60)\n        .on(\"end\", draw);\n        layout.start();\n\n        // This function takes the output of 'layout' above and draw the words\n        // Better not to touch it. To change parameters, play with the 'layout' variable above\n        function draw(words) {\n        svg\n            .append(\"g\")\n            .attr(\"transform\", \"translate(\" + layout.size()[0] / 2 + \",\" + layout.size()[1] / 2 + \")\")\n            .selectAll(\"text\")\n                .data(words)\n            .enter().append(\"text\")\n                .style(\"font-size\", function(d) { return d.size + \"px\"; })\n                .attr(\"text-anchor\", \"middle\")\n                .attr(\"transform\", function(d) {\n                return \"translate(\" + [d.x, d.y] + \")rotate(\" + d.rotate + \")\";\n                })\n                .text(function(d) { return d.text; });\n        }\n\n    }\n    render() {\n        return (\n          <>\n            <h1>{this.props.location.state}</h1>\n            <div ref={this.chRef}></div>\n        </>\n        );\n    }\n}\nexport default withRouter(WordCloud);"]},"metadata":{},"sourceType":"module"}