{"ast":null,"code":"import _classCallCheck from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/components/Cloud.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { enrichTopics } from '../utils/dataprocessor';\nimport d3Cloud from 'd3-cloud';\n/**\n * Render the cloud using D3. Not stateless, because async rendering of d3-cloud\n */\n\nvar Cloud = /*#__PURE__*/function (_Component) {\n  _inherits(Cloud, _Component);\n\n  var _super = _createSuper(Cloud);\n\n  function Cloud(props) {\n    var _this;\n\n    _classCallCheck(this, Cloud);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      cloudDimensions: [],\n      isProcessing: true\n    };\n    return _this;\n  }\n  /**\n   * Process data. Add range of volumes and fontSizes\n   * @return {void} Will call setState\n   */\n\n\n  _createClass(Cloud, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.topics.length === 0) {\n        return;\n      }\n\n      var _this$props = this.props,\n          fontName = _this$props.fontName,\n          fontSizes = _this$props.fontSizes,\n          height = _this$props.height,\n          topics = _this$props.topics,\n          width = _this$props.width;\n      /** Start calculation of cloud */\n\n      d3Cloud().size([width, height]).words(enrichTopics(topics, fontSizes).entities).padding(10).font(fontName).text(function (d) {\n        return d.label;\n      }).fontSize(function (d) {\n        return d.fontSize;\n      }).random(function () {\n        return 0.5;\n      }).rotate(function () {\n        return 0;\n      }).on('end', function (cloudDimensions) {\n        _this2.setState({\n          cloudDimensions: cloudDimensions,\n          isProcessing: false\n        });\n      }).start();\n    }\n    /**\n     * Render cloud as svg\n     * @return {ReactElement} [description]\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props2 = this.props,\n          fontName = _this$props2.fontName,\n          height = _this$props2.height,\n          onSelectTopic = _this$props2.onSelectTopic,\n          selectedTopic = _this$props2.selectedTopic,\n          topics = _this$props2.topics,\n          width = _this$props2.width;\n\n      if (this.state.isProcessing) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"wordcloud__container_cloud\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 11\n          }\n        }, \"Loading...\"));\n      }\n      /**\n       * Build class names to highlight the selected component\n       * @param  {Object} item  Topic item\n       * @return {String}       Class names\n       */\n\n\n      var getClassNames = function getClassNames(item) {\n        var classNames = 'wordcloud__cloud_label';\n\n        if (item.sentimentScore > 0) {\n          classNames += ' wordcloud__cloud_label--color-green';\n        } else if (item.sentimentScore < 0) {\n          classNames += ' wordcloud__cloud_label--color-red';\n        } else {\n          classNames += ' wordcloud__cloud_label--color-grey';\n        }\n\n        if (selectedTopic !== null && selectedTopic.hasOwnProperty('id') && selectedTopic.id === item.id) {\n          classNames += ' wordcloud__cloud_label--is-active';\n        }\n\n        return classNames;\n      };\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"wordcloud__container_cloud\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"wordcloud__cloud\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"svg\", {\n        width: width,\n        height: height,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"g\", {\n        transform: \"translate(\".concat(width / 2, \", \").concat(height / 2, \")\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      }, this.state.cloudDimensions.map(function (item) {\n        return /*#__PURE__*/React.createElement(\"text\", {\n          className: getClassNames(item),\n          key: item.id,\n          onClick: function onClick() {\n            return onSelectTopic(item);\n          },\n          style: {\n            fontSize: item.size,\n            fontFamily: fontName\n          },\n          textAnchor: \"middle\",\n          transform: \"translate(\".concat(item.x, \" , \").concat(item.y, \" )\"),\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }\n        }, item.text);\n      })))), topics.length > this.state.cloudDimensions.length ? /*#__PURE__*/React.createElement(\"p\", {\n        className: \"worcloud__hint\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 62\n        }\n      }, \"Some topics cannot be displayed, because of the available space.\") : '');\n    }\n  }]);\n\n  return Cloud;\n}(Component);\n\nexport { Cloud as default };\nCloud.propTypes = {\n  fontName: PropTypes.string.isRequired,\n  fontSizes: PropTypes.array.isRequired,\n  height: PropTypes.number.isRequired,\n  onSelectTopic: PropTypes.func.isRequired,\n  selectedTopic: PropTypes.object,\n  topics: PropTypes.array.isRequired,\n  width: PropTypes.number.isRequired\n};\nCloud.defaultProps = {\n  selectedTopic: null\n};","map":{"version":3,"sources":["/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/components/Cloud.js"],"names":["React","Component","PropTypes","enrichTopics","d3Cloud","Cloud","props","state","cloudDimensions","isProcessing","topics","length","fontName","fontSizes","height","width","size","words","entities","padding","font","text","d","label","fontSize","random","rotate","on","setState","start","onSelectTopic","selectedTopic","getClassNames","item","classNames","sentimentScore","hasOwnProperty","id","map","fontFamily","x","y","propTypes","string","isRequired","array","number","func","object","defaultProps"],"mappings":"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","sourcesContent":["import React, {\n  Component,\n} from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport {\n  enrichTopics,\n} from '../utils/dataprocessor';\n\nimport d3Cloud from 'd3-cloud';\n \n/**\n * Render the cloud using D3. Not stateless, because async rendering of d3-cloud\n */\nexport default class Cloud extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cloudDimensions: [],\n      isProcessing: true,\n    };\n  }\n\n  /**\n   * Process data. Add range of volumes and fontSizes\n   * @return {void} Will call setState\n   */\n  componentDidMount() {\n    if (this.props.topics.length === 0) {\n      return;\n    }\n    const {\n      fontName,\n      fontSizes,\n      height,\n      topics,\n      width,\n    } = this.props;\n\n    /** Start calculation of cloud */\n    d3Cloud()\n      .size([width, height])\n      .words(enrichTopics(topics, fontSizes).entities)\n      .padding(10)\n      .font(fontName)\n      .text((d) => d.label)\n      .fontSize((d) => d.fontSize)\n      .random(() => 0.5)\n      .rotate(() => 0)\n      .on('end', (cloudDimensions) => { this.setState({ cloudDimensions, isProcessing: false }); })\n      .start();\n  }\n\n  /**\n   * Render cloud as svg\n   * @return {ReactElement} [description]\n   */\n  render() {\n    const {\n      fontName,\n      height,\n      onSelectTopic,\n      selectedTopic,\n      topics,\n      width,\n    } = this.props;\n\n    if (this.state.isProcessing) {\n      return (\n        <div className=\"wordcloud__container_cloud\">\n          <span >Loading...</span>\n        </div>\n      );\n    }\n\n    /**\n     * Build class names to highlight the selected component\n     * @param  {Object} item  Topic item\n     * @return {String}       Class names\n     */\n    const getClassNames = (item) => {\n      let classNames = 'wordcloud__cloud_label';\n\n      if (item.sentimentScore > 0) {\n        classNames += ' wordcloud__cloud_label--color-green';\n      } else if (item.sentimentScore < 0) {\n        classNames += ' wordcloud__cloud_label--color-red';\n      } else {\n        classNames += ' wordcloud__cloud_label--color-grey';\n      }\n\n      if (\n        selectedTopic !== null\n        && selectedTopic.hasOwnProperty('id')\n        && selectedTopic.id === item.id\n      ) {\n        classNames += ' wordcloud__cloud_label--is-active';\n      }\n      return classNames;\n    };\n\n    return (\n      <div className=\"wordcloud__container_cloud\">\n        <div className=\"wordcloud__cloud\">\n          <svg width={width} height={height}>\n            <g transform={`translate(${width / 2}, ${height / 2})`}>\n              {this.state.cloudDimensions.map(item =>\n                <text\n                  className={getClassNames(item)}\n                  key={item.id}\n                  onClick={() => onSelectTopic(item)}\n                  style={{\n                    fontSize: item.size,\n                    fontFamily: fontName,\n                  }}\n                  textAnchor=\"middle\"\n                  transform={`translate(${item.x} , ${item.y} )`}\n                >{item.text}</text>\n              )}\n            </g>\n          </svg>\n        </div>\n        {topics.length > this.state.cloudDimensions.length ? <p className=\"worcloud__hint\">Some topics cannot be displayed, because of the available space.</p> : ''}\n      </div>\n    );\n  }\n}\n\nCloud.propTypes = {\n  fontName: PropTypes.string.isRequired,\n  fontSizes: PropTypes.array.isRequired,\n  height: PropTypes.number.isRequired,\n  onSelectTopic: PropTypes.func.isRequired,\n  selectedTopic: PropTypes.object,\n  topics: PropTypes.array.isRequired,\n  width: PropTypes.number.isRequired,\n};\n\nCloud.defaultProps = {\n  selectedTopic: null,\n};\n\n"]},"metadata":{},"sourceType":"module"}