{"ast":null,"code":"import _classCallCheck from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/components/TimeSeriesChart.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport \"./CanadaMap.css\";\nimport Province from \"./Province\";\nimport { withRouter } from \"react-router-dom\";\nimport PieClass from \"./PieClass\";\nimport * as d3 from \"d3\";\nimport { render } from 'react-dom';\nimport TimeSeriesCSV from '../data/covidData/CovidTimeSeries.csv';\nvar colors = ['red', 'blue', 'green'];\n\nvar TimeSeriesChart = /*#__PURE__*/function (_Component) {\n  _inherits(TimeSeriesChart, _Component);\n\n  var _super = _createSuper(TimeSeriesChart);\n\n  function TimeSeriesChart(props) {\n    var _this;\n\n    _classCallCheck(this, TimeSeriesChart);\n\n    _this = _super.call(this, props);\n    _this.chRef = React.createRef();\n    var timeSeriesData = _this.props.data;\n    return _this;\n  }\n\n  _createClass(TimeSeriesChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawChart();\n    }\n  }, {\n    key: \"drawChart\",\n    value: function drawChart() {\n      console.log(\"PV\", this.props.history.location.state);\n      var typedata = TimeSeriesCSV;\n      var margin = {\n        top: 10,\n        right: 30,\n        bottom: 30,\n        left: 60\n      },\n          width = 460 - margin.left - margin.right,\n          height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n      var svg = d3.select(this.chRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\".concat(margin.left, \", \").concat(margin.top, \")\")); //Read the data\n\n      d3.csv(typedata, // When reading the csv, I must format variables:\n      function (d) {\n        if (d.location == this.props.history.location.state.split(\"-\")[0]) {\n          return {\n            date: d3.timeParse(\"%Y-%m-%d\")(d.date),\n            value: d.value,\n            location: d.location\n          };\n        }\n      }).then( // Now I can use this dataset:\n      function (data) {\n        // Add X axis --> it is a date format\n        var x = d3.scaleTime().domain(d3.extent(data, function (d) {\n          return d.date;\n        })).range([0, width]);\n        var xAxis = svg.append(\"g\").attr(\"transform\", \"translate(0, \".concat(height, \")\")).call(d3.axisBottom(x)); // Add Y axis\n\n        var y = d3.scaleLinear().domain([-100, d3.max(data, function (d) {\n          return +d.value;\n        })]).range([height, 0]);\n        var yAxis = svg.append(\"g\").call(d3.axisLeft(y)); // Add a clipPath: everything out of this area won't be drawn.\n\n        var clip = svg.append(\"defs\").append(\"svg:clipPath\").attr(\"id\", \"clip\").append(\"svg:rect\").attr(\"width\", width).attr(\"height\", height).attr(\"x\", 0).attr(\"y\", 0); // Add brushing\n\n        var brush = d3.brushX() // Add the brush feature using the d3.brush function\n        .extent([[0, 0], [width, height]]) // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n        .on(\"end\", updateChart); // Each time the brush selection changes, trigger the 'updateChart' function\n        // Create the line variable: where both the line and the brush take place\n\n        var line = svg.append('g').attr(\"clip-path\", \"url(#clip)\"); // Add the line\n\n        line.append(\"path\").datum(data).attr(\"class\", \"line\") // I add the class line to be able to modify this line later on.\n        .attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", 1.5).attr(\"d\", d3.line().x(function (d) {\n          return x(d.date);\n        }).y(function (d) {\n          return y(d.value);\n        })); // Add the brushing\n\n        line.append(\"g\").attr(\"class\", \"brush\").call(brush); // A function that set idleTimeOut to null\n\n        var idleTimeout;\n\n        function idled() {\n          idleTimeout = null;\n        } // A function that update the chart for given boundaries\n\n\n        function updateChart(event, d) {\n          // What are the selected boundaries?\n          var extent = event.selection; // If no selection, back to initial coordinate. Otherwise, update X axis domain\n\n          if (!extent) {\n            if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\n\n            x.domain([4, 8]);\n          } else {\n            x.domain([x.invert(extent[0]), x.invert(extent[1])]);\n            line.select(\".brush\").call(brush.move, null); // This remove the grey brush area as soon as the selection has been done\n          } // Update axis and line position\n\n\n          xAxis.transition().duration(1000).call(d3.axisBottom(x));\n          line.select('.line').transition().duration(1000).attr(\"d\", d3.line().x(function (d) {\n            return x(d.date);\n          }).y(function (d) {\n            return y(d.value);\n          }));\n        } // If user double click, reinitialize the chart\n\n\n        svg.on(\"dblclick\", function () {\n          x.domain(d3.extent(data, function (d) {\n            return d.date;\n          }));\n          xAxis.transition().call(d3.axisBottom(x));\n          line.select('.line').transition().attr(\"d\", d3.line().x(function (d) {\n            return x(d.date);\n          }).y(function (d) {\n            return y(d.value);\n          }));\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }\n      }, \"Time Series Chart\"), /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.chRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return TimeSeriesChart;\n}(Component);\n\nexport default withRouter(TimeSeriesChart);","map":{"version":3,"sources":["/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/components/TimeSeriesChart.js"],"names":["React","Component","useState","useEffect","Province","withRouter","PieClass","d3","render","TimeSeriesCSV","colors","TimeSeriesChart","props","chRef","createRef","timeSeriesData","data","drawChart","console","log","history","location","state","typedata","margin","top","right","bottom","left","width","height","svg","select","current","append","attr","csv","d","split","date","timeParse","value","then","x","scaleTime","domain","extent","range","xAxis","call","axisBottom","y","scaleLinear","max","yAxis","axisLeft","clip","brush","brushX","on","updateChart","line","datum","idleTimeout","idled","event","selection","setTimeout","invert","move","transition","duration"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\r\nimport \"./CanadaMap.css\";\r\nimport Province from \"./Province\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport PieClass from \"./PieClass\";\r\nimport * as d3 from \"d3\";\r\nimport { render } from 'react-dom';\r\nimport TimeSeriesCSV from '../data/covidData/CovidTimeSeries.csv';\r\nconst colors = [ 'red' , 'blue', 'green']\r\n\r\nclass TimeSeriesChart extends Component {\r\n    \r\n  constructor(props) {\r\n    super(props);\r\n    this.chRef = React.createRef();\r\n\r\n    const timeSeriesData = this.props.data;\r\n  }\r\n  componentDidMount(){\r\n      this.drawChart();\r\n  }\r\n\r\n  drawChart(){\r\n    console.log(\"PV\",this.props.history.location.state)\r\n    const typedata = TimeSeriesCSV;\r\n    const margin = {top: 10, right: 30, bottom: 30, left: 60},\r\n    width = 460 - margin.left - margin.right,\r\n    height = 400 - margin.top - margin.bottom;\r\n\r\n// append the svg object to the body of the page\r\nconst svg = d3.select(this.chRef.current)\r\n  .append(\"svg\")\r\n    .attr(\"width\", width + margin.left + margin.right)\r\n    .attr(\"height\", height + margin.top + margin.bottom)\r\n  .append(\"g\")\r\n    .attr(\"transform\",\r\n          `translate(${margin.left}, ${margin.top})`);\r\n\r\n//Read the data\r\nd3.csv(typedata,\r\n\r\n  // When reading the csv, I must format variables:\r\n  function(d){\r\n    if (d.location == this.props.history.location.state.split(\"-\")[0]){\r\n      return { date : d3.timeParse(\"%Y-%m-%d\")(d.date), value : d.value, location: d.location }\r\n    }\r\n  }).then(\r\n\r\n  // Now I can use this dataset:\r\n  function(data) {\r\n\r\n    // Add X axis --> it is a date format\r\n    const x = d3.scaleTime()\r\n      .domain(d3.extent(data, function(d) { return d.date; }))\r\n      .range([ 0, width ]);\r\n    var xAxis = svg.append(\"g\")\r\n      .attr(\"transform\", `translate(0, ${height})`)\r\n      .call(d3.axisBottom(x));\r\n\r\n    // Add Y axis\r\n    const y = d3.scaleLinear()\r\n      .domain([-100, d3.max(data, function(d) { return +d.value; })])\r\n      .range([ height, 0 ]);\r\n    var yAxis = svg.append(\"g\")\r\n      .call(d3.axisLeft(y));\r\n\r\n    // Add a clipPath: everything out of this area won't be drawn.\r\n    const clip = svg.append(\"defs\").append(\"svg:clipPath\")\r\n        .attr(\"id\", \"clip\")\r\n        .append(\"svg:rect\")\r\n        .attr(\"width\", width )\r\n        .attr(\"height\", height )\r\n        .attr(\"x\", 0)\r\n        .attr(\"y\", 0);\r\n\r\n    // Add brushing\r\n    const brush = d3.brushX()                   // Add the brush feature using the d3.brush function\r\n        .extent( [ [0,0], [width,height] ] )  // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\r\n        .on(\"end\", updateChart)               // Each time the brush selection changes, trigger the 'updateChart' function\r\n\r\n    // Create the line variable: where both the line and the brush take place\r\n    const line = svg.append('g')\r\n      .attr(\"clip-path\", \"url(#clip)\")\r\n\r\n    // Add the line\r\n    line.append(\"path\")\r\n      .datum(data)\r\n      .attr(\"class\", \"line\")  // I add the class line to be able to modify this line later on.\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke\", \"steelblue\")\r\n      .attr(\"stroke-width\", 1.5)\r\n      .attr(\"d\", d3.line()\r\n        .x(function(d) { return x(d.date) })\r\n        .y(function(d) { return y(d.value) })\r\n        )\r\n\r\n    // Add the brushing\r\n    line\r\n      .append(\"g\")\r\n        .attr(\"class\", \"brush\")\r\n        .call(brush);\r\n\r\n    // A function that set idleTimeOut to null\r\n    let idleTimeout\r\n    function idled() { idleTimeout = null; }\r\n\r\n    // A function that update the chart for given boundaries\r\n    function updateChart(event,d) {\r\n\r\n      // What are the selected boundaries?\r\n      var extent = event.selection\r\n\r\n      // If no selection, back to initial coordinate. Otherwise, update X axis domain\r\n      if(!extent){\r\n        if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit\r\n        x.domain([ 4,8])\r\n      }else{\r\n        x.domain([ x.invert(extent[0]), x.invert(extent[1]) ])\r\n        line.select(\".brush\").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done\r\n      }\r\n\r\n      // Update axis and line position\r\n      xAxis.transition().duration(1000).call(d3.axisBottom(x))\r\n      line\r\n          .select('.line')\r\n          .transition()\r\n          .duration(1000)\r\n          .attr(\"d\", d3.line()\r\n            .x(function(d) { return x(d.date) })\r\n            .y(function(d) { return y(d.value) })\r\n          )\r\n    }\r\n\r\n    // If user double click, reinitialize the chart\r\n    svg.on(\"dblclick\",function(){\r\n      x.domain(d3.extent(data, function(d) { return d.date; }))\r\n      xAxis.transition().call(d3.axisBottom(x))\r\n      line\r\n        .select('.line')\r\n        .transition()\r\n        .attr(\"d\", d3.line()\r\n          .x(function(d) { return x(d.date) })\r\n          .y(function(d) { return y(d.value) })\r\n      )\r\n    });\r\n\r\n})\r\n  }\r\n\r\n    render() {\r\n        return (\r\n        <>  \r\n            <h1>Time Series Chart</h1>\r\n            <div ref={this.chRef}></div>\r\n            {/* <div>{console.log(\"DATA\",TimeSeriesCSV)}</div> */}\r\n        </>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(TimeSeriesChart);"]},"metadata":{},"sourceType":"module"}