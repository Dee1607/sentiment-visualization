{"ast":null,"code":"import _orderBy from 'lodash/orderBy';\nimport _map from 'lodash/map';\n/**\n * Returns min and max volume as an object.\n * @param  {Object[]} topics Structured topics\n * @return {Object} Object with values minVolume and maxVolume\n */\n\nexport function getMinMaxVolume(topics) {\n  /** Use orderBy. Just a single sort process needed **/\n  var sortedTopics = _orderBy(topics, 'volume');\n\n  return {\n    minVolume: sortedTopics[0].volume,\n    maxVolume: sortedTopics[sortedTopics.length - 1].volume\n  };\n}\n/**\n * Return fontSize\n * @param  {int} volume       Volume of certain element\n * @param  {int} maxVolume    maximum volume available\n * @param  {int} minVolume    minimum volume available\n * @param  {int[]} fontSizes  available font sizes\n * @return {int}              Element of provided fontSizes\n */\n\nexport function getFontSize(volume, maxVolume, minVolume, fontSizes) {\n  var multiplier = (maxVolume - minVolume) / (fontSizes.length - 1);\n  return fontSizes[Math.floor(volume / multiplier)];\n}\n/**\n * Single function to compose other reducer functions\n * @param  {Object[]} topics    topics Structured topics\n * @param  {Int[]} fontSizes    available font sizes\n * @return {Object[]}           Object with additional values. Topics itself as entities.\n */\n\nexport function enrichTopics(topics, fontSizes) {\n  var minMaxVolume = getMinMaxVolume(topics);\n\n  var topicsWithFontSize = _map(topics, function (topic) {\n    return Object.assign({}, topic, {\n      fontSize: getFontSize(topic.volume, minMaxVolume.maxVolume, minMaxVolume.minVolume, fontSizes)\n    });\n  });\n\n  return {\n    minVolume: minMaxVolume.minVolume,\n    maxVolume: minMaxVolume.maxVolume,\n    entities: topicsWithFontSize\n  };\n}","map":{"version":3,"sources":["/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/utils/dataprocessor.js"],"names":["_orderBy","_map","getMinMaxVolume","topics","sortedTopics","minVolume","volume","maxVolume","length","getFontSize","fontSizes","multiplier","Math","floor","enrichTopics","minMaxVolume","topicsWithFontSize","topic","Object","assign","fontSize","entities"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;AACtC;AACA,MAAMC,YAAY,GAAGJ,QAAQ,CAACG,MAAD,EAAS,QAAT,CAA7B;;AAEA,SAAO;AACLE,IAAAA,SAAS,EAAED,YAAY,CAAC,CAAD,CAAZ,CAAgBE,MADtB;AAELC,IAAAA,SAAS,EAAEH,YAAY,CAACA,YAAY,CAACI,MAAb,GAAsB,CAAvB,CAAZ,CAAsCF;AAF5C,GAAP;AAID;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,WAAT,CAAqBH,MAArB,EAA6BC,SAA7B,EAAwCF,SAAxC,EAAmDK,SAAnD,EAA8D;AACnE,MAAMC,UAAU,GAAG,CAACJ,SAAS,GAAGF,SAAb,KAA2BK,SAAS,CAACF,MAAV,GAAmB,CAA9C,CAAnB;AACA,SAAOE,SAAS,CAACE,IAAI,CAACC,KAAL,CAAWP,MAAM,GAAGK,UAApB,CAAD,CAAhB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,YAAT,CAAsBX,MAAtB,EAA8BO,SAA9B,EAAyC;AAC9C,MAAMK,YAAY,GAAGb,eAAe,CAACC,MAAD,CAApC;;AACA,MAAMa,kBAAkB,GAAGf,IAAI,CAACE,MAAD,EAAS,UAACc,KAAD;AAAA,WAAWC,MAAM,CAACC,MAAP,CACjD,EADiD,EAEjDF,KAFiD,EAGjD;AAAEG,MAAAA,QAAQ,EAAEX,WAAW,CAACQ,KAAK,CAACX,MAAP,EAAeS,YAAY,CAACR,SAA5B,EAAuCQ,YAAY,CAACV,SAApD,EAA+DK,SAA/D;AAAvB,KAHiD,CAAX;AAAA,GAAT,CAA/B;;AAMA,SAAO;AACLL,IAAAA,SAAS,EAAEU,YAAY,CAACV,SADnB;AAELE,IAAAA,SAAS,EAAEQ,YAAY,CAACR,SAFnB;AAGLc,IAAAA,QAAQ,EAAEL;AAHL,GAAP;AAKD","sourcesContent":["import _orderBy from 'lodash/orderBy';\nimport _map from 'lodash/map';\n\n/**\n * Returns min and max volume as an object.\n * @param  {Object[]} topics Structured topics\n * @return {Object} Object with values minVolume and maxVolume\n */\nexport function getMinMaxVolume(topics) {\n  /** Use orderBy. Just a single sort process needed **/\n  const sortedTopics = _orderBy(topics, 'volume');\n\n  return {\n    minVolume: sortedTopics[0].volume,\n    maxVolume: sortedTopics[sortedTopics.length - 1].volume,\n  };\n}\n\n\n/**\n * Return fontSize\n * @param  {int} volume       Volume of certain element\n * @param  {int} maxVolume    maximum volume available\n * @param  {int} minVolume    minimum volume available\n * @param  {int[]} fontSizes  available font sizes\n * @return {int}              Element of provided fontSizes\n */\nexport function getFontSize(volume, maxVolume, minVolume, fontSizes) {\n  const multiplier = (maxVolume - minVolume) / (fontSizes.length - 1);\n  return fontSizes[Math.floor(volume / multiplier)];\n}\n\n/**\n * Single function to compose other reducer functions\n * @param  {Object[]} topics    topics Structured topics\n * @param  {Int[]} fontSizes    available font sizes\n * @return {Object[]}           Object with additional values. Topics itself as entities.\n */\nexport function enrichTopics(topics, fontSizes) {\n  const minMaxVolume = getMinMaxVolume(topics);\n  const topicsWithFontSize = _map(topics, (topic) => Object.assign(\n    {},\n    topic,\n    { fontSize: getFontSize(topic.volume, minMaxVolume.maxVolume, minMaxVolume.minVolume, fontSizes) }\n  ));\n\n  return {\n    minVolume: minMaxVolume.minVolume,\n    maxVolume: minMaxVolume.maxVolume,\n    entities: topicsWithFontSize,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}