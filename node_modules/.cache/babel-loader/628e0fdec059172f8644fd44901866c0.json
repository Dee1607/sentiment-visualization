{"ast":null,"code":"import _classCallCheck from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/components/donutChart.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport d3moji from 'd3moji';\nvar colors = ['#8ce8ad', '#57e188', '#34c768', '#2db757', '#27acaa', '#42c9c2', '#60e6e1', '#93f0e6', '#87d3f2', '#4ebeeb', '#35a4e8', '#188ce5', '#542ea5', '#724bc3', '#9c82d4', '#c981b2', '#b14891', '#ff6d00', '#ff810a', '#ff9831', '#ffb46a', '#ff9a91', '#ff736a', '#f95d54', '#ff4136', '#c4c4cd'];\n\nvar DonutChart = /*#__PURE__*/function (_Component) {\n  _inherits(DonutChart, _Component);\n\n  var _super = _createSuper(DonutChart);\n\n  function DonutChart(props) {\n    var _this;\n\n    _classCallCheck(this, DonutChart);\n\n    _this = _super.call(this, props);\n    _this.chRef = React.createRef();\n    return _this;\n  } // Chart load after component Mount\n\n\n  _createClass(DonutChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawChart();\n    } // DrawChart\n\n  }, {\n    key: \"drawChart\",\n    value: function drawChart() {\n      // Create dummy data\n      var data = this.props.data; // console.log(data)\n      // chart dimensions\n\n      var width = 800;\n      var height = 800; // a circle chart needs a radius\n\n      var radius = Math.min(width, height) / 2;\n      var donutWidth = 100; // size of donut hole. not needed if doing pie chart\n      // legend dimensions\n\n      var legendRectSize = 25; // defines the size of the colored squares in legend\n\n      var legendSpacing = 6; // defines spacing between squares\n      // define color scale\n\n      var color = d3.scaleOrdinal(d3.schemeCategory20b); // more color scales: https://bl.ocks.org/pstuffa/3393ff2711a53975040077b7453781a9\n      // calculate new total\n\n      var total = d3.sum(dataset, function (d) {\n        return d.count;\n      }); // define new total section\n\n      var newTotal = d3.select('.new-total-holder').append('span').attr('class', 'newTotal').text(total);\n      var svg = d3.select('#chart') // select element in the DOM with id 'chart'\n      .append('svg') // append an svg element to the element we've selected\n      .attr('width', width) // set the width of the svg element we just added\n      .attr('height', height) // set the height of the svg element we just added\n      .append('g') // append 'g' element to the svg element\n      .attr('transform', 'translate(' + width / 2 + ',' + height / 2 + ')'); // our reference is now to the 'g' element. centerting the 'g' element to the svg element\n\n      var arc = d3.arc().innerRadius(radius - donutWidth) // radius - donutWidth = size of donut hole. use 0 for pie chart\n      .outerRadius(radius); // size of overall chart\n\n      var pie = d3.pie() // start and end angles of the segments\n      .value(function (d) {\n        return d.count;\n      }) // how to extract the numerical data from each entry in our dataset\n      .sort(null); // by default, data sorts in oescending value. this will mess with our animation so we set it to null\n      //**********************\n      //        TOOLTIP\n      //**********************\n\n      var tooltip = d3.select('#chart') // select element in the DOM with id 'chart'\n      .append('div') // append a div element to the element we've selected                                    \n      .attr('class', 'tooltip'); // add class 'tooltip' on the divs we just selected\n\n      tooltip.append('div') // add divs to the tooltip defined above\n      .attr('class', 'label'); // add class 'label' on the selection\n\n      tooltip.append('div') // add divs to the tooltip defined above   \n      .attr('class', 'count'); // add class 'count' on the selection                  \n\n      tooltip.append('div') // add divs to the tooltip defined above  \n      .attr('class', 'percent'); // add class 'percent' on the selection\n      // Confused? see below:\n      // <div id=\"chart\">\n      //   <div class=\"tooltip\">\n      //     <div class=\"label\">\n      //     </div>\n      //     <div class=\"count\">\n      //     </div>\n      //     <div class=\"percent\">\n      //     </div>\n      //   </div>\n      // </div>\n\n      dataset.forEach(function (d) {\n        d.count = +d.count; // calculate count as we iterate through the data\n\n        d.enabled = true; // add enabled property to track which entries are checked\n      }); // creating the chart\n\n      var path = svg.selectAll('path') // select all path elements inside the svg. specifically the 'g' element. they don't exist yet but they will be created below\n      .data(pie(dataset)) //associate dataset wit he path elements we're about to create. must pass through the pie function. it magically knows how to extract values and bakes it into the pie\n      .enter() //creates placeholder nodes for each of the values\n      .append('path') // replace placeholders with path elements\n      .attr('d', arc) // define d attribute with arc function above\n      .attr('fill', function (d) {\n        return color(d.data.label);\n      }) // use color scale to define fill of each label in dataset\n      .each(function (d) {\n        this._current - d;\n      }); // creates a smooth animation for each track\n      // mouse event handlers are attached to path so they need to come after its definition\n\n      path.on('mouseover', function (d) {\n        // when mouse enters div      \n        var total = d3.sum(dataset.map(function (d) {\n          // calculate the total number of tickets in the dataset         \n          return d.enabled ? d.count : 0; // checking to see if the entry is enabled. if it isn't, we return 0 and cause other percentages to increase                                      \n        }));\n        var percent = Math.round(1000 * d.data.count / total) / 10; // calculate percent\n\n        tooltip.select('.label').html(d.data.label); // set current label           \n\n        tooltip.select('.count').html('$' + d.data.count); // set current count            \n\n        tooltip.select('.percent').html(percent + '%'); // set percent calculated above          \n\n        tooltip.style('display', 'block'); // set display                     \n      });\n      path.on('mouseout', function () {\n        // when mouse leaves div                        \n        tooltip.style('display', 'none'); // hide tooltip for that element\n      });\n      path.on('mousemove', function (d) {\n        // when mouse moves                  \n        tooltip.style('top', d3.event.layerY + 10 + 'px') // always 10px below the cursor\n        .style('left', d3.event.layerX + 10 + 'px'); // always 10px to the right of the mouse\n      }); // define legend\n\n      var legend = svg.selectAll('.legend') // selecting elements with class 'legend'\n      .data(color.domain()) // refers to an array of labels from our dataset\n      .enter() // creates placeholder\n      .append('g') // replace placeholders with g elements\n      .attr('class', 'legend') // each g is given a legend class\n      .attr('transform', function (d, i) {\n        var height = legendRectSize + legendSpacing; // height of element is the height of the colored square plus the spacing      \n\n        var offset = height * color.domain().length / 2; // vertical offset of the entire legend = height of a single element & half the total number of elements  \n\n        var horz = -2 * legendRectSize; // the legend is shifted to the left to make room for the text\n\n        var vert = i * height - offset; // the top of the element is hifted up or down from the center using the offset defiend earlier and the index of the current element 'i'               \n\n        return 'translate(' + horz + ',' + vert + ')'; //return translation       \n      }); // adding colored squares to legend\n\n      legend.append('rect') // append rectangle squares to legend                                   \n      .attr('width', legendRectSize) // width of rect size is defined above                        \n      .attr('height', legendRectSize) // height of rect size is defined above                      \n      .style('fill', color) // each fill is passed a color\n      .style('stroke', color) // each stroke is passed a color\n      .on('click', function (label) {\n        var rect = d3.select(this); // this refers to the colored squared just clicked\n\n        var enabled = true; // set enabled true to default\n\n        var totalEnabled = d3.sum(dataset.map(function (d) {\n          // can't disable all options\n          return d.enabled ? 1 : 0; // return 1 for each enabled entry. and summing it up\n        }));\n\n        if (rect.attr('class') === 'disabled') {\n          // if class is disabled\n          rect.attr('class', ''); // remove class disabled\n        } else {\n          // else\n          if (totalEnabled < 2) return; // if less than two labels are flagged, exit\n\n          rect.attr('class', 'disabled'); // otherwise flag the square disabled\n\n          enabled = false; // set enabled to false\n        }\n\n        pie.value(function (d) {\n          if (d.label === label) d.enabled = enabled; // if entry label matches legend label\n\n          return d.enabled ? d.count : 0; // update enabled property and return count or 0 based on the entry's status\n        });\n        path = path.data(pie(dataset)); // update pie with new data\n\n        path.transition() // transition of redrawn pie\n        .duration(750) // \n        .attrTween('d', function (d) {\n          // 'd' specifies the d attribute that we'll be animating\n          var interpolate = d3.interpolate(this._current, d); // this = current path element\n\n          this._current = interpolate(0); // interpolate between current value and the new value of 'd'\n\n          return function (t) {\n            return arc(interpolate(t));\n          };\n        }); // calculate new total\n\n        var newTotalCalc = d3.sum(dataset.filter(function (d) {\n          return d.enabled;\n        }), function (d) {\n          return d.count;\n        }); // console.log(newTotalCalc);\n        // append newTotalCalc to newTotal which is defined above\n\n        newTotal.text(newTotalCalc);\n      }); // adding text to legend\n\n      legend.append('text').attr('x', legendRectSize + legendSpacing).attr('y', legendRectSize - legendSpacing).text(function (d) {\n        return d;\n      }); // return label\n      //     const svgContainer = d3.select(this.chRef.current).node();\n      //     const width  = svgContainer.getBoundingClientRect().width;\n      //     const height = width;\n      //     const margin = 15;\n      //     let radius = Math.min(width, height) / 2  - margin;\n      //     // legend Position\n      //     let legendPosition = d3.arc().innerRadius(radius/1.75).outerRadius(radius);\n      //     // Create SVG\n      //     const svg  = d3.select(this.chRef.current)\n      //     .append('svg')\n      //     .attr(\"width\", '50%')\n      //     .attr(\"height\", '50%')\n      //         .attr('viewBox', '0 0 ' + width + ' ' + width )\n      //     //.attr('preserveAspectRatio','xMinYMin')\n      //     .append(\"g\")\n      //     .attr(\"transform\", \"translate(\" + Math.min(width,height) / 2 + \",\" + Math.min(width,height) / 2 + \")\");\n      //     let pie = d3.pie()\n      //         .value( d => d.percentage )\n      //     let data_ready = pie(data)\n      //     // Donut partition  \n      //     svg\n      //     .selectAll('whatever')\n      //     .data(data_ready)\n      //     .enter()\n      //     .append('path')\n      //     .attr('d', d3.arc()\n      //         .innerRadius(radius/ 1.75)  // This is the size of the donut hole\n      //         .outerRadius(radius)\n      //     )\n      //     .attr('fill',  (d) =>  colors[d.index] )\n      //     .attr(\"stroke\", \"#fff\")\n      //     .style(\"stroke-width\", \"2\")\n      //     .style(\"opacity\", \"0.8\")\n      //   // Legend group and legend name\n      //    svg\n      //     .selectAll('mySlices')\n      //     .data(data_ready)\n      //     .enter()\n      //     .append('g')\n      //     .attr(\"transform\", d => `translate(${legendPosition.centroid(d)})`)\n      //     .attr(\"class\", 'legend-g')\n      //     .style(\"user-select\", \"none\")\n      //     .append('text')\n      //     .text(d =>  d.data.province)\n      //     .style(\"text-anchor\", \"middle\")\n      //     .style(\"font-weight\", 700)\n      //     .style(\"fill\", '#222')\n      //     .style(\"font-size\", 14);\n      //    //Label for value\n      //     svg\n      //     .selectAll('.legend-g')\n      //     .append('text')\n      //     .text((d)=>{ return  d.data.percentage})\n      //     .style(\"fill\", '#444')\n      //     .style(\"font-size\", 12)\n      //     .style(\"text-anchor\", \"middle\")\n      //     .attr(\"y\", 16 );\n      // // set the dimensions and margins of the graph\n      // var width = 450, height = 450, margin = 40\n      // // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n      // var radius = Math.min(width, height) / 2 - margin\n      // // append the svg object to the div called 'my_dataviz'\n      // var svg = d3.select(this.chRef.current)\n      // .append(\"svg\")\n      // .attr(\"width\", width)\n      // .attr(\"height\", height)\n      // .append(\"g\")\n      // .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n      // // set the color scale\n      // var color = d3.scaleOrdinal()\n      // .domain(data)\n      // .range(['#8ce8ad', '#57e188', '#34c768', '#2db757', '#27acaa', '#42c9c2', '#60e6e1', '#93f0e6', '#87d3f2', '#4ebeeb', '#35a4e8', '#188ce5', '#542ea5', '#724bc3', '#9c82d4', '#c981b2', '#b14891', '#ff6d00', '#ff810a', '#ff9831', '#ffb46a', '#ff9a91', '#ff736a', '#f95d54', '#ff4136', '#c4c4cd' ])\n      // // Compute the position of each group on the pie:\n      // var pie = d3.pie()\n      // .value(function(d) { return d.percentage; })\n      // var data_ready = pie(data)\n      // // console.log(data_ready)\n      // // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n      // svg\n      // .selectAll('whatever')\n      // .data(data_ready)\n      // .enter()\n      // .append('path')\n      // .attr('d', d3.arc()\n      // .innerRadius(100)         // This is the size of the donut hole\n      // .outerRadius(radius)\n      // )\n      // .attr('fill', function(d){ return(color(d.data.province)) })\n      // .attr(\"stroke\", \"black\")\n      // .style(\"stroke-width\", \"2px\")\n      // .style(\"opacity\", 0.7)\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.chRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"script\", {\n        src: \"https://cdn.amcharts.com/lib/5/index.js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"script\", {\n        src: \"https://cdn.amcharts.com/lib/5/percent.js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"script\", {\n        src: \"https://cdn.amcharts.com/lib/5/themes/Animated.js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"script\", {\n        src: \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3/dist/d3.js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"script\", {\n        src: \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3moji/d3moji.js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return DonutChart;\n}(Component);\n\nexport default DonutChart;","map":{"version":3,"sources":["/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/components/donutChart.js"],"names":["React","Component","d3","d3moji","colors","DonutChart","props","chRef","createRef","drawChart","data","width","height","radius","Math","min","donutWidth","legendRectSize","legendSpacing","color","scaleOrdinal","schemeCategory20b","total","sum","dataset","d","count","newTotal","select","append","attr","text","svg","arc","innerRadius","outerRadius","pie","value","sort","tooltip","forEach","enabled","path","selectAll","enter","label","each","_current","on","map","percent","round","html","style","event","layerY","layerX","legend","domain","i","offset","length","horz","vert","rect","totalEnabled","transition","duration","attrTween","interpolate","t","newTotalCalc","filter"],"mappings":"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","sourcesContent":["import React , { Component} from 'react';\nimport * as d3 from 'd3';\nimport d3moji from 'd3moji'\nconst colors = [ '#8ce8ad', '#57e188', '#34c768', '#2db757', '#27acaa', '#42c9c2', '#60e6e1', '#93f0e6', '#87d3f2', '#4ebeeb', '#35a4e8', '#188ce5', '#542ea5', '#724bc3', '#9c82d4', '#c981b2', '#b14891', '#ff6d00', '#ff810a', '#ff9831', '#ffb46a', '#ff9a91', '#ff736a', '#f95d54', '#ff4136', '#c4c4cd' ];\n \nclass DonutChart extends Component {\n\n    constructor(props) {\n        super(props);\n        this.chRef = React.createRef();\n    }\n \n    // Chart load after component Mount\n    componentDidMount() {\n        this.drawChart()\n    }\n \n    // DrawChart\n    drawChart(){\n        // Create dummy data\n        const {data} = this.props;\n        // console.log(data)\n\n        // chart dimensions\n        var width = 800;\n        var height = 800;\n\n        // a circle chart needs a radius\n        var radius = Math.min(width, height) / 2;\n        var donutWidth = 100; // size of donut hole. not needed if doing pie chart\n\n        // legend dimensions\n        var legendRectSize = 25; // defines the size of the colored squares in legend\n        var legendSpacing = 6; // defines spacing between squares\n\n        // define color scale\n        var color = d3.scaleOrdinal(d3.schemeCategory20b);\n        // more color scales: https://bl.ocks.org/pstuffa/3393ff2711a53975040077b7453781a9\n\n        // calculate new total\n        var total = d3.sum(dataset, d => d.count);\n\n        // define new total section\n        var newTotal = d3.select('.new-total-holder')\n        .append('span')\n        .attr('class', 'newTotal').text(total);\n\n        var svg = d3.select('#chart') // select element in the DOM with id 'chart'\n        .append('svg') // append an svg element to the element we've selected\n        .attr('width', width) // set the width of the svg element we just added\n        .attr('height', height) // set the height of the svg element we just added\n        .append('g') // append 'g' element to the svg element\n        .attr('transform', 'translate(' + (width / 2) + ',' + (height / 2) + ')'); // our reference is now to the 'g' element. centerting the 'g' element to the svg element\n\n        var arc = d3.arc()\n        .innerRadius(radius - donutWidth) // radius - donutWidth = size of donut hole. use 0 for pie chart\n        .outerRadius(radius); // size of overall chart\n\n        var pie = d3.pie() // start and end angles of the segments\n        .value(function(d) { return d.count; }) // how to extract the numerical data from each entry in our dataset\n        .sort(null); // by default, data sorts in oescending value. this will mess with our animation so we set it to null\n\n        //**********************\n        //        TOOLTIP\n        //**********************\n\n        var tooltip = d3.select('#chart') // select element in the DOM with id 'chart'\n        .append('div') // append a div element to the element we've selected                                    \n        .attr('class', 'tooltip'); // add class 'tooltip' on the divs we just selected\n\n        tooltip.append('div') // add divs to the tooltip defined above\n        .attr('class', 'label'); // add class 'label' on the selection\n        tooltip.append('div') // add divs to the tooltip defined above   \n        .attr('class', 'count'); // add class 'count' on the selection                  \n        tooltip.append('div') // add divs to the tooltip defined above  \n        .attr('class', 'percent'); // add class 'percent' on the selection\n\n        // Confused? see below:\n\n        // <div id=\"chart\">\n        //   <div class=\"tooltip\">\n        //     <div class=\"label\">\n        //     </div>\n        //     <div class=\"count\">\n        //     </div>\n        //     <div class=\"percent\">\n        //     </div>\n        //   </div>\n        // </div>\n\n        dataset.forEach(function(d) {\n        d.count = +d.count; // calculate count as we iterate through the data\n        d.enabled = true; // add enabled property to track which entries are checked\n        });\n\n        // creating the chart\n        var path = svg.selectAll('path') // select all path elements inside the svg. specifically the 'g' element. they don't exist yet but they will be created below\n        .data(pie(dataset)) //associate dataset wit he path elements we're about to create. must pass through the pie function. it magically knows how to extract values and bakes it into the pie\n        .enter() //creates placeholder nodes for each of the values\n        .append('path') // replace placeholders with path elements\n        .attr('d', arc) // define d attribute with arc function above\n        .attr('fill', function(d) { return color(d.data.label); }) // use color scale to define fill of each label in dataset\n        .each(function(d) { this._current - d; }); // creates a smooth animation for each track\n\n        // mouse event handlers are attached to path so they need to come after its definition\n        path.on('mouseover', function(d) {  // when mouse enters div      \n        var total = d3.sum(dataset.map(function(d) { // calculate the total number of tickets in the dataset         \n        return (d.enabled) ? d.count : 0; // checking to see if the entry is enabled. if it isn't, we return 0 and cause other percentages to increase                                      \n        }));                                                      \n        var percent = Math.round(1000 * d.data.count / total) / 10; // calculate percent\n        tooltip.select('.label').html(d.data.label); // set current label           \n        tooltip.select('.count').html('$' + d.data.count); // set current count            \n        tooltip.select('.percent').html(percent + '%'); // set percent calculated above          \n        tooltip.style('display', 'block'); // set display                     \n        });                                                           \n\n        path.on('mouseout', function() { // when mouse leaves div                        \n        tooltip.style('display', 'none'); // hide tooltip for that element\n        });\n\n        path.on('mousemove', function(d) { // when mouse moves                  \n        tooltip.style('top', (d3.event.layerY + 10) + 'px') // always 10px below the cursor\n            .style('left', (d3.event.layerX + 10) + 'px'); // always 10px to the right of the mouse\n        });\n\n        // define legend\n        var legend = svg.selectAll('.legend') // selecting elements with class 'legend'\n        .data(color.domain()) // refers to an array of labels from our dataset\n        .enter() // creates placeholder\n        .append('g') // replace placeholders with g elements\n        .attr('class', 'legend') // each g is given a legend class\n        .attr('transform', function(d, i) {                   \n            var height = legendRectSize + legendSpacing; // height of element is the height of the colored square plus the spacing      \n            var offset =  height * color.domain().length / 2; // vertical offset of the entire legend = height of a single element & half the total number of elements  \n            var horz = -2 * legendRectSize; // the legend is shifted to the left to make room for the text\n            var vert = i * height - offset; // the top of the element is hifted up or down from the center using the offset defiend earlier and the index of the current element 'i'               \n            return 'translate(' + horz + ',' + vert + ')'; //return translation       \n        });\n\n        // adding colored squares to legend\n        legend.append('rect') // append rectangle squares to legend                                   \n        .attr('width', legendRectSize) // width of rect size is defined above                        \n        .attr('height', legendRectSize) // height of rect size is defined above                      \n        .style('fill', color) // each fill is passed a color\n        .style('stroke', color) // each stroke is passed a color\n        .on('click', function(label) {\n            var rect = d3.select(this); // this refers to the colored squared just clicked\n            var enabled = true; // set enabled true to default\n            var totalEnabled = d3.sum(dataset.map(function(d) { // can't disable all options\n            return (d.enabled) ? 1 : 0; // return 1 for each enabled entry. and summing it up\n            }));\n            if (rect.attr('class') === 'disabled') { // if class is disabled\n            rect.attr('class', ''); // remove class disabled\n            } else { // else\n            if (totalEnabled < 2) return; // if less than two labels are flagged, exit\n            rect.attr('class', 'disabled'); // otherwise flag the square disabled\n            enabled = false; // set enabled to false\n            }\n\n            pie.value(function(d) { \n            if (d.label === label) d.enabled = enabled; // if entry label matches legend label\n                return (d.enabled) ? d.count : 0; // update enabled property and return count or 0 based on the entry's status\n            });\n\n            path = path.data(pie(dataset)); // update pie with new data\n\n            path.transition() // transition of redrawn pie\n            .duration(750) // \n            .attrTween('d', function(d) { // 'd' specifies the d attribute that we'll be animating\n                var interpolate = d3.interpolate(this._current, d); // this = current path element\n                this._current = interpolate(0); // interpolate between current value and the new value of 'd'\n                return function(t) {\n                return arc(interpolate(t));\n                };\n            });\n            \n            // calculate new total\n            var newTotalCalc = d3.sum(dataset.filter(function(d) { return d.enabled;}), d => d.count)\n        // console.log(newTotalCalc);\n        \n            // append newTotalCalc to newTotal which is defined above\n            newTotal.text(newTotalCalc);\n        });\n\n        // adding text to legend\n        legend.append('text')                                    \n        .attr('x', legendRectSize + legendSpacing)\n        .attr('y', legendRectSize - legendSpacing)\n        .text(function(d) { return d; }); // return label\n\n\n\n\n    //     const svgContainer = d3.select(this.chRef.current).node();\n    //     const width  = svgContainer.getBoundingClientRect().width;\n    //     const height = width;\n    //     const margin = 15;\n    //     let radius = Math.min(width, height) / 2  - margin;\n    //     // legend Position\n    //     let legendPosition = d3.arc().innerRadius(radius/1.75).outerRadius(radius);\n \n    //     // Create SVG\n    //     const svg  = d3.select(this.chRef.current)\n    //     .append('svg')\n    //     .attr(\"width\", '50%')\n    //     .attr(\"height\", '50%')\n    //         .attr('viewBox', '0 0 ' + width + ' ' + width )\n    //     //.attr('preserveAspectRatio','xMinYMin')\n    //     .append(\"g\")\n    //     .attr(\"transform\", \"translate(\" + Math.min(width,height) / 2 + \",\" + Math.min(width,height) / 2 + \")\");\n \n    //     let pie = d3.pie()\n    //         .value( d => d.percentage )\n    //     let data_ready = pie(data)\n \n    //     // Donut partition  \n    //     svg\n    //     .selectAll('whatever')\n    //     .data(data_ready)\n    //     .enter()\n    //     .append('path')\n    //     .attr('d', d3.arc()\n    //         .innerRadius(radius/ 1.75)  // This is the size of the donut hole\n    //         .outerRadius(radius)\n    //     )\n    //     .attr('fill',  (d) =>  colors[d.index] )\n    //     .attr(\"stroke\", \"#fff\")\n    //     .style(\"stroke-width\", \"2\")\n    //     .style(\"opacity\", \"0.8\")\n \n \n    //   // Legend group and legend name\n    //    svg\n    //     .selectAll('mySlices')\n    //     .data(data_ready)\n    //     .enter()\n    //     .append('g')\n    //     .attr(\"transform\", d => `translate(${legendPosition.centroid(d)})`)\n    //     .attr(\"class\", 'legend-g')\n    //     .style(\"user-select\", \"none\")\n    //     .append('text')\n    //     .text(d =>  d.data.province)\n    //     .style(\"text-anchor\", \"middle\")\n    //     .style(\"font-weight\", 700)\n    //     .style(\"fill\", '#222')\n    //     .style(\"font-size\", 14);\n \n    //    //Label for value\n    //     svg\n    //     .selectAll('.legend-g')\n    //     .append('text')\n    //     .text((d)=>{ return  d.data.percentage})\n    //     .style(\"fill\", '#444')\n    //     .style(\"font-size\", 12)\n    //     .style(\"text-anchor\", \"middle\")\n    //     .attr(\"y\", 16 );\n\n\n\n        // // set the dimensions and margins of the graph\n        // var width = 450, height = 450, margin = 40\n\n        // // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n        // var radius = Math.min(width, height) / 2 - margin\n\n        // // append the svg object to the div called 'my_dataviz'\n        // var svg = d3.select(this.chRef.current)\n        // .append(\"svg\")\n        // .attr(\"width\", width)\n        // .attr(\"height\", height)\n        // .append(\"g\")\n        // .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n\n        // // set the color scale\n        // var color = d3.scaleOrdinal()\n        // .domain(data)\n        // .range(['#8ce8ad', '#57e188', '#34c768', '#2db757', '#27acaa', '#42c9c2', '#60e6e1', '#93f0e6', '#87d3f2', '#4ebeeb', '#35a4e8', '#188ce5', '#542ea5', '#724bc3', '#9c82d4', '#c981b2', '#b14891', '#ff6d00', '#ff810a', '#ff9831', '#ffb46a', '#ff9a91', '#ff736a', '#f95d54', '#ff4136', '#c4c4cd' ])\n\n        // // Compute the position of each group on the pie:\n        // var pie = d3.pie()\n        // .value(function(d) { return d.percentage; })\n        // var data_ready = pie(data)\n        // // console.log(data_ready)\n        // // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n        // svg\n        // .selectAll('whatever')\n        // .data(data_ready)\n        // .enter()\n        // .append('path')\n        // .attr('d', d3.arc()\n        // .innerRadius(100)         // This is the size of the donut hole\n        // .outerRadius(radius)\n        // )\n        // .attr('fill', function(d){ return(color(d.data.province)) })\n        // .attr(\"stroke\", \"black\")\n        // .style(\"stroke-width\", \"2px\")\n        // .style(\"opacity\", 0.7)\n    } \n \n    render() {\n        return <>\n            <div ref={this.chRef}></div> \n            <script src=\"https://cdn.amcharts.com/lib/5/index.js\"></script>\n            <script src=\"https://cdn.amcharts.com/lib/5/percent.js\"></script>\n            <script src=\"https://cdn.amcharts.com/lib/5/themes/Animated.js\"></script>\n            <script src=\"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3/dist/d3.js\"></script>\n            <script src=\"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3moji/d3moji.js\"></script>\n            \n        </>\n    }\n}\n \nexport default DonutChart;\n"]},"metadata":{},"sourceType":"module"}