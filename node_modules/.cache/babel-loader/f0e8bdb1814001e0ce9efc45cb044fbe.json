{"ast":null,"code":"import _classCallCheck from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/components/donutChart.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nvar DonutChart = /*#__PURE__*/function (_Component) {\n  _inherits(DonutChart, _Component);\n\n  var _super = _createSuper(DonutChart);\n\n  function DonutChart(props) {\n    var _this;\n\n    _classCallCheck(this, DonutChart);\n\n    _this = _super.call(this, props);\n    _this.chRef = React.createRef();\n    return _this;\n  } // Chart load after component Mount\n\n\n  _createClass(DonutChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawChart();\n    } // DrawChart\n\n  }, {\n    key: \"drawChart\",\n    value: function drawChart() {\n      var dataset = this.props.dataset; // console.log(data)\n      // set the dimensions and margins of the graph\n\n      var width = 450;\n      height = 450;\n      margin = 40; // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n\n      var radius = Math.min(width, height) / 2 - margin; // append the svg object to the div called 'my_dataviz'\n\n      var svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\"); // Create dummy data\n\n      var data = dataset; // set the color scale\n\n      var color = d3.scaleOrdinal().domain(data).range([\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\"]); // Compute the position of each group on the pie:\n\n      var pie = d3.pie().value(function (d) {\n        return d.value;\n      });\n      var data_ready = pie(d3.entries(data)); // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n\n      svg.selectAll('whatever').data(data_ready).enter().append('path').attr('d', d3.arc().innerRadius(100) // This is the size of the donut hole\n      .outerRadius(radius)).attr('fill', function (d) {\n        return color(d.data.key);\n      }).attr(\"stroke\", \"black\").style(\"stroke-width\", \"2px\").style(\"opacity\", 0.7);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.chRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"script\", {\n        src: \"https://d3js.org/d3.v4.js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"script\", {\n        src: \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3/dist/d3.js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"script\", {\n        src: \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3moji/d3moji.js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return DonutChart;\n}(Component);\n\nexport default DonutChart;","map":{"version":3,"sources":["/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/components/donutChart.js"],"names":["React","Component","d3","DonutChart","props","chRef","createRef","drawChart","dataset","width","height","margin","radius","Math","min","svg","select","append","attr","data","color","scaleOrdinal","domain","range","pie","value","d","data_ready","entries","selectAll","enter","arc","innerRadius","outerRadius","key","style"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAiBC,SAAjB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;IAEMC,U;;;;;AAEF,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAaL,KAAK,CAACM,SAAN,EAAb;AAFe;AAGlB,G,CAED;;;;;WACA,6BAAoB;AAChB,WAAKC,SAAL;AACH,K,CAED;;;;WACA,qBAAW;AACP,UAAOC,OAAP,GAAkB,KAAKJ,KAAvB,CAAOI,OAAP,CADO,CAEP;AAEA;;AACA,UAAIC,KAAK,GAAG,GAAZ;AACAC,MAAAA,MAAM,GAAG,GAAT;AACAC,MAAAA,MAAM,GAAG,EAAT,CAPO,CASP;;AACA,UAAIC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASL,KAAT,EAAgBC,MAAhB,IAA0B,CAA1B,GAA8BC,MAA3C,CAVO,CAYP;;AACA,UAAII,GAAG,GAAGb,EAAE,CAACc,MAAH,CAAU,aAAV,EACTC,MADS,CACF,KADE,EAETC,IAFS,CAEJ,OAFI,EAEKT,KAFL,EAGTS,IAHS,CAGJ,QAHI,EAGMR,MAHN,EAITO,MAJS,CAIF,GAJE,EAKTC,IALS,CAKJ,WALI,EAKS,eAAeT,KAAK,GAAG,CAAvB,GAA2B,GAA3B,GAAiCC,MAAM,GAAG,CAA1C,GAA8C,GALvD,CAAV,CAbO,CAoBP;;AACA,UAAIS,IAAI,GAAGX,OAAX,CArBO,CAuBP;;AACA,UAAIY,KAAK,GAAGlB,EAAE,CAACmB,YAAH,GACXC,MADW,CACJH,IADI,EAEXI,KAFW,CAEL,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CAFK,CAAZ,CAxBO,CA4BP;;AACA,UAAIC,GAAG,GAAGtB,EAAE,CAACsB,GAAH,GACTC,KADS,CACH,UAASC,CAAT,EAAY;AAAC,eAAOA,CAAC,CAACD,KAAT;AAAiB,OAD3B,CAAV;AAEA,UAAIE,UAAU,GAAGH,GAAG,CAACtB,EAAE,CAAC0B,OAAH,CAAWT,IAAX,CAAD,CAApB,CA/BO,CAiCP;;AACAJ,MAAAA,GAAG,CACFc,SADD,CACW,UADX,EAECV,IAFD,CAEMQ,UAFN,EAGCG,KAHD,GAICb,MAJD,CAIQ,MAJR,EAKCC,IALD,CAKM,GALN,EAKWhB,EAAE,CAAC6B,GAAH,GACVC,WADU,CACE,GADF,EACe;AADf,OAEVC,WAFU,CAEErB,MAFF,CALX,EASCM,IATD,CASM,MATN,EASc,UAASQ,CAAT,EAAW;AAAE,eAAON,KAAK,CAACM,CAAC,CAACP,IAAF,CAAOe,GAAR,CAAZ;AAA2B,OATtD,EAUChB,IAVD,CAUM,QAVN,EAUgB,OAVhB,EAWCiB,KAXD,CAWO,cAXP,EAWuB,KAXvB,EAYCA,KAZD,CAYO,SAZP,EAYkB,GAZlB;AAcH;;;WAED,kBAAS;AACL,0BAAO,uDACH;AAAK,QAAA,GAAG,EAAE,KAAK9B,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADG,eAEH;AAAQ,QAAA,GAAG,EAAC,2BAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFG,eAGH;AAAQ,QAAA,GAAG,EAAC,4FAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHG,eAIH;AAAQ,QAAA,GAAG,EAAC,+FAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJG,CAAP;AAOH;;;;EAvEoBJ,S;;AA0EzB,eAAeE,UAAf","sourcesContent":["import React , { Component} from 'react';\nimport * as d3 from 'd3';\n\nclass DonutChart extends Component {\n\n    constructor(props) {\n        super(props);\n        this.chRef = React.createRef();\n    }\n \n    // Chart load after component Mount\n    componentDidMount() {\n        this.drawChart()\n    }\n \n    // DrawChart\n    drawChart(){\n        const {dataset} = this.props;\n        // console.log(data)\n\n        // set the dimensions and margins of the graph\n        var width = 450\n        height = 450\n        margin = 40\n\n        // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n        var radius = Math.min(width, height) / 2 - margin\n\n        // append the svg object to the div called 'my_dataviz'\n        var svg = d3.select(\"#my_dataviz\")\n        .append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .append(\"g\")\n        .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n        // Create dummy data\n        var data = dataset;\n\n        // set the color scale\n        var color = d3.scaleOrdinal()\n        .domain(data)\n        .range([\"#98abc5\", \"#8a89a6\", \"#7b6888\", \"#6b486b\", \"#a05d56\"])\n\n        // Compute the position of each group on the pie:\n        var pie = d3.pie()\n        .value(function(d) {return d.value; })\n        var data_ready = pie(d3.entries(data))\n\n        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n        svg\n        .selectAll('whatever')\n        .data(data_ready)\n        .enter()\n        .append('path')\n        .attr('d', d3.arc()\n        .innerRadius(100)         // This is the size of the donut hole\n        .outerRadius(radius)\n        )\n        .attr('fill', function(d){ return(color(d.data.key)) })\n        .attr(\"stroke\", \"black\")\n        .style(\"stroke-width\", \"2px\")\n        .style(\"opacity\", 0.7)\n\n    } \n \n    render() {\n        return <>\n            <div ref={this.chRef}></div> \n            <script src=\"https://d3js.org/d3.v4.js\"></script>\n            <script src=\"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3/dist/d3.js\"></script>\n            <script src=\"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3moji/d3moji.js\"></script>\n            \n        </>\n    }\n}\n \nexport default DonutChart;\n"]},"metadata":{},"sourceType":"module"}