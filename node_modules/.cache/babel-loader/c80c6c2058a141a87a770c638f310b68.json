{"ast":null,"code":"import _classCallCheck from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/components/PieChart.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport \"./CanadaMap.css\";\nimport Province from \"./Province\";\nimport { withRouter } from \"react-router-dom\";\nimport DonutJSON from \"./PieChartData.json\";\nimport PieClass from \"./PieClass\";\nimport * as d3 from \"d3\";\n\nvar PieChart = /*#__PURE__*/function (_Component) {\n  _inherits(PieChart, _Component);\n\n  var _super = _createSuper(PieChart);\n\n  function PieChart(props) {\n    var _this;\n\n    _classCallCheck(this, PieChart);\n\n    _this = _super.call(this, props);\n    _this.chRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(PieChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawChart();\n    } // A function that create / update the plot for a given variable:\n\n  }, {\n    key: \"update\",\n    value: function (_update) {\n      function update(_x, _x2, _x3, _x4, _x5, _x6) {\n        return _update.apply(this, arguments);\n      }\n\n      update.toString = function () {\n        return _update.toString();\n      };\n\n      return update;\n    }(function (data, svg, radius, color, update, data1) {\n      // Compute the position of each group on the pie:\n      var pie = d3.pie().value(function (d) {\n        return d.value;\n      }).sort(function (a, b) {\n        console.log(a);\n        return d3.ascending(a.key, b.key);\n      }); // This make sure that group order remains the same in the pie chart\n\n      var data_ready = pie(data); // map to data\n\n      var u = svg.selectAll(\"path\").data(data_ready); // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n\n      u.enter().append('path').merge(u).transition().duration(1000).attr('d', d3.arc().innerRadius(0).outerRadius(radius)).attr('fill', function (d) {\n        return color(d.data.key);\n      }).attr(\"stroke\", \"white\").style(\"stroke-width\", \"2px\").style(\"opacity\", 1); // remove the group that is not present anymore\n\n      u.exit().remove();\n    })\n  }, {\n    key: \"drawChart\",\n    value: function drawChart() {\n      // Create dummy data\n      var data = DonutJSON;\n      var usableData = {};\n\n      for (var i = 0; i <= 15; i++) {\n        if (data[i]) {\n          if (data[i].location === this.props.location.state) {\n            usableData = data[i];\n          }\n        }\n      }\n\n      var width = 450,\n          height = 450,\n          margin = 40; // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n\n      var radius = Math.min(width, height) / 2 - margin; // append the svg object to the div called 'my_dataviz'\n\n      var svg = d3.select(this.chRef.current).append(\"svg\").attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\"); // create 2 data_set\n\n      var data1 = {\n        a: 9,\n        b: 20,\n        c: 30,\n        d: 8,\n        e: 12\n      }; // var data2 = {a: 6, b: 16, c:20, d:14, e:19, f:12}\n      // set the color scale\n\n      var color = d3.scaleOrdinal().domain([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]).range(d3.schemeDark2); // Initialize the plot with the first dataset\n\n      update(data1, svg);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }\n      }, this.props.location.state), /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.chRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: update(data1),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }\n      }, \"button1\"), /*#__PURE__*/React.createElement(\"script\", {\n        src: \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3/dist/d3.js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"script\", {\n        src: \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3moji/d3moji.js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return PieChart;\n}(Component);\n\nexport default withRouter(PieChart);","map":{"version":3,"sources":["/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/components/PieChart.js"],"names":["React","Component","useState","useEffect","Province","withRouter","DonutJSON","PieClass","d3","PieChart","props","chRef","createRef","drawChart","data","svg","radius","color","update","data1","pie","value","d","sort","a","b","console","log","ascending","key","data_ready","u","selectAll","enter","append","merge","transition","duration","attr","arc","innerRadius","outerRadius","style","exit","remove","usableData","i","location","state","width","height","margin","Math","min","select","current","c","e","scaleOrdinal","domain","range","schemeDark2"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport \"./CanadaMap.css\";\nimport Province from \"./Province\";\nimport { withRouter } from \"react-router-dom\";\nimport DonutJSON from \"./PieChartData.json\";\nimport PieClass from \"./PieClass\";\nimport * as d3 from \"d3\";\n\nclass PieChart extends Component {\n    \n  constructor(props) {\n    super(props);\n    this.chRef = React.createRef();\n  }\n\ncomponentDidMount(){\n    this.drawChart()\n}\n// A function that create / update the plot for a given variable:\nupdate(data,svg,radius,color,update,data1) {\n\n    // Compute the position of each group on the pie:\n    var pie = d3.pie()\n      .value(function(d) {return d.value; })\n      .sort(function(a, b) { console.log(a) ; return d3.ascending(a.key, b.key);} ) // This make sure that group order remains the same in the pie chart\n    var data_ready = pie(data)\n  \n    // map to data\n    var u = svg.selectAll(\"path\")\n      .data(data_ready)\n  \n    // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n    u\n      .enter()\n      .append('path')\n      .merge(u)\n      .transition()\n      .duration(1000)\n      .attr('d', d3.arc()\n        .innerRadius(0)\n        .outerRadius(radius)\n      )\n      .attr('fill', function(d){ return(color(d.data.key)) })\n      .attr(\"stroke\", \"white\")\n      .style(\"stroke-width\", \"2px\")\n      .style(\"opacity\", 1)\n  \n    // remove the group that is not present anymore\n    u\n      .exit()\n      .remove()\n  \n  }\ndrawChart(){\n    // Create dummy data\n    const data = DonutJSON;\n    let usableData = {}\n    for(let i=0; i<=15; i++){\n        if(data[i]){\n            if(data[i].location === this.props.location.state){\n            usableData = data[i];\n            }\n        }\n    }\n\n    var width = 450, height = 450, margin = 40\n\n// The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\nvar radius = Math.min(width, height) / 2 - margin\n\n// append the svg object to the div called 'my_dataviz'\nvar svg = d3.select(this.chRef.current)\n  .append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height)\n  .append(\"g\")\n    .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n// create 2 data_set\nvar data1 = {a: 9, b: 20, c:30, d:8, e:12}\n// var data2 = {a: 6, b: 16, c:20, d:14, e:19, f:12}\n\n// set the color scale\nvar color = d3.scaleOrdinal()\n  .domain([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])\n  .range(d3.schemeDark2);\n\n// Initialize the plot with the first dataset\nupdate(data1,svg)\n}\n\nrender() {\n    return (\n      <>\n        <h1>{this.props.location.state}</h1>\n        <div ref={this.chRef}></div> \n        <button onClick={update(data1)}>button1</button>\n        <script src=\"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3/dist/d3.js\"></script>\n        <script src=\"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3moji/d3moji.js\"></script>\n      </>\n    );\n  }\n}\n\nexport default withRouter(PieChart);\n"]},"metadata":{},"sourceType":"module"}