{"ast":null,"code":"import _classCallCheck from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/components/TimeSeriesChart.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport \"./CanadaMap.css\";\nimport Province from \"./Province\";\nimport { withRouter } from \"react-router-dom\";\nimport TimeSeriesCSV from '../components/Book1.csv';\nimport PieClass from \"./PieClass\";\nimport * as d3 from \"d3\";\nimport { render } from 'react-dom';\nvar colors = ['red', 'blue', 'green'];\n\nvar TimeSeriesChart = /*#__PURE__*/function (_Component) {\n  _inherits(TimeSeriesChart, _Component);\n\n  var _super = _createSuper(TimeSeriesChart);\n\n  function TimeSeriesChart(props) {\n    var _this;\n\n    _classCallCheck(this, TimeSeriesChart);\n\n    _this = _super.call(this, props);\n    _this.chRef = React.createRef();\n    return _this;\n  }\n\n  _createClass(TimeSeriesChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawChart();\n    }\n  }, {\n    key: \"drawChart\",\n    value: function drawChart() {\n      // set the dimensions and margins of the graph\n      var margin = {\n        top: 10,\n        right: 30,\n        bottom: 30,\n        left: 60\n      },\n          width = 460 - margin.left - margin.right,\n          height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n      var svg = d3.select(this.chRef.current).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\".concat(margin.left, \",\").concat(margin.top, \")\")); //Read the data\n\n      d3.csv(TimeSeriesCSV).then(function (data) {\n        // group the data: I want to draw one line per group\n        var sumstat = d3.group(data, function (d) {\n          return d.sentiment;\n        }); // nest function allows to group the calculation per level of a factor\n        // Add X axis --> it is a date format\n\n        var x = d3.scaleLinear().domain(d3.extent(data, function (d) {\n          return d.tweet_timestamp;\n        })).range([0, width]);\n        svg.append(\"g\").attr(\"transform\", \"translate(0, \".concat(height, \")\")).call(d3.axisBottom(x).ticks(5)); // Add Y axis\n\n        var y = d3.scaleLinear().domain([0, d3.max(data, function (d) {\n          return +d.happiness_intensity;\n        })]).range([height, 0]);\n        svg.append(\"g\").call(d3.axisLeft(y)); // color palette\n\n        var color = d3.scaleOrdinal().range(['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999']); // Draw the line\n\n        svg.selectAll(\".line\").data(sumstat).join(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", function (d) {\n          return color(d[0]);\n        }).attr(\"stroke-width\", 1.5).attr(\"d\", function (d) {\n          return d3.line().x(function (d) {\n            return x(d.tweet_timestamp);\n          }).y(function (d) {\n            return y(+d.happiness_intensity);\n          })(d[1]);\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.chRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return TimeSeriesChart;\n}(Component);\n\nexport default withRouter(TimeSeriesChart);","map":{"version":3,"sources":["/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/components/TimeSeriesChart.js"],"names":["React","Component","useState","useEffect","Province","withRouter","TimeSeriesCSV","PieClass","d3","render","colors","TimeSeriesChart","props","chRef","createRef","drawChart","margin","top","right","bottom","left","width","height","svg","select","current","append","attr","csv","then","data","sumstat","group","d","sentiment","x","scaleLinear","domain","extent","tweet_timestamp","range","call","axisBottom","ticks","y","max","happiness_intensity","axisLeft","color","scaleOrdinal","selectAll","join","line"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\nimport \"./CanadaMap.css\";\nimport Province from \"./Province\";\nimport { withRouter } from \"react-router-dom\";\nimport TimeSeriesCSV from '../components/Book1.csv'\nimport PieClass from \"./PieClass\";\nimport * as d3 from \"d3\";\nimport { render } from 'react-dom';\n\nconst colors = [ 'red' , 'blue', 'green']\n\nclass TimeSeriesChart extends Component {\n    \n  constructor(props) {\n    super(props);\n    this.chRef = React.createRef();\n  }\n  componentDidMount(){\n      this.drawChart();\n  }\n\n  drawChart(){\n        // set the dimensions and margins of the graph\n        const margin = {top: 10, right: 30, bottom: 30, left: 60},\n        width = 460 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n\n        // append the svg object to the body of the page\n        const svg = d3.select(this.chRef.current)\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n        //Read the data\n        d3.csv(TimeSeriesCSV).then( function(data) {\n        // group the data: I want to draw one line per group\n        const sumstat = d3.group(data, d => d.sentiment); // nest function allows to group the calculation per level of a factor\n\n        // Add X axis --> it is a date format\n        const x = d3.scaleLinear()\n        .domain(d3.extent(data, function(d) { return d.tweet_timestamp; }))\n        .range([ 0, width ]);\n        svg.append(\"g\")\n        .attr(\"transform\", `translate(0, ${height})`)\n        .call(d3.axisBottom(x).ticks(5));\n\n        // Add Y axis\n        const y = d3.scaleLinear()\n        .domain([0, d3.max(data, function(d) { return +d.happiness_intensity; })])\n        .range([ height, 0 ]);\n        svg.append(\"g\")\n        .call(d3.axisLeft(y));\n\n        // color palette\n        const color = d3.scaleOrdinal()\n        .range(['#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00','#ffff33','#a65628','#f781bf','#999999'])\n\n        // Draw the line\n        svg.selectAll(\".line\")\n        .data(sumstat)\n        .join(\"path\")\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", function(d){ return color(d[0]) })\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"d\", function(d){\n            return d3.line()\n                .x(function(d) { return x(d.tweet_timestamp); })\n                .y(function(d) { return y(+d.happiness_intensity); })\n                (d[1])\n            })\n\n        })\n  }\n\n    render() {\n        return (\n        <>  \n            <div ref={this.chRef}></div>\n            {/* <div>{console.log(\"DATA\",TimeSeriesCSV)}</div> */}\n        </>\n        );\n    }\n}\nexport default withRouter(TimeSeriesChart);"]},"metadata":{},"sourceType":"module"}