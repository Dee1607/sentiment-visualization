{"ast":null,"code":"import _classCallCheck from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/components/donutChart.js\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\nimport d3moji from 'd3moji';\nvar colors = ['#8ce8ad', '#57e188', '#34c768', '#2db757', '#27acaa', '#42c9c2', '#60e6e1', '#93f0e6', '#87d3f2', '#4ebeeb', '#35a4e8', '#188ce5', '#542ea5', '#724bc3', '#9c82d4', '#c981b2', '#b14891', '#ff6d00', '#ff810a', '#ff9831', '#ffb46a', '#ff9a91', '#ff736a', '#f95d54', '#ff4136', '#c4c4cd'];\n\nvar DonutChart = /*#__PURE__*/function (_Component) {\n  _inherits(DonutChart, _Component);\n\n  var _super = _createSuper(DonutChart);\n\n  function DonutChart(props) {\n    var _this;\n\n    _classCallCheck(this, DonutChart);\n\n    _this = _super.call(this, props);\n    _this.chRef = React.createRef();\n    return _this;\n  } // Chart load after component Mount\n\n\n  _createClass(DonutChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.drawChart();\n    } // DrawChart\n\n  }, {\n    key: \"drawChart\",\n    value: function drawChart() {\n      // set the dimensions and margins of the graph\n      var width = 450,\n          height = 450,\n          margin = 40; // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n\n      var radius = Math.min(width, height) / 2 - margin; // append the svg object to the div called 'my_dataviz'\n\n      var svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width).attr(\"height\", height).append(\"g\").attr(\"transform\", \"translate(\".concat(width / 2, \",\").concat(height / 2, \")\")); // Create dummy data\n\n      var data = this.props.data; // console.log(data)\n      // set the color scale\n\n      var color = d3.scaleOrdinal().domain(function (d) {\n        return color(d.data[1]);\n      }).range(d3.schemeDark2); // Compute the position of each group on the pie:\n\n      var pie = d3.pie().sort(null) // Do not sort group by size\n      .value(function (d) {\n        return d[1];\n      });\n      var data_ready = pie(Object.entries(data)); // The arc generator\n\n      var arc = d3.arc().innerRadius(radius * 0.5) // This is the size of the donut hole\n      .outerRadius(radius * 0.8); // Another arc that won't be drawn. Just for labels positioning\n\n      var outerArc = d3.arc().innerRadius(radius * 0.9).outerRadius(radius * 0.9); // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n\n      svg.selectAll('allSlices').data(data_ready).join('path').attr('d', arc).attr('fill', function (d) {\n        return color(d.data[1]);\n      }).attr(\"stroke\", \"white\").style(\"stroke-width\", \"2px\").style(\"opacity\", 0.7); // Add the polylines between chart and labels:\n\n      svg.selectAll('allPolylines').data(data_ready).join('polyline').attr(\"stroke\", \"black\").style(\"fill\", \"none\").attr(\"stroke-width\", 1).attr('points', function (d) {\n        var posA = arc.centroid(d); // line insertion in the slice\n\n        var posB = outerArc.centroid(d); // line break: we use the other arc generator that has been built only for that\n\n        var posC = outerArc.centroid(d); // Label position = almost the same as posB\n\n        var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2; // we need the angle to see if the X position will be at the extreme right or extreme left\n\n        posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left\n\n        return [posA, posB, posC];\n      }); // Add the polylines between chart and labels:\n\n      svg.selectAll('allLabels').data(data_ready).join('text').text(function (d) {\n        return d.data[0];\n      }).attr('transform', function (d) {\n        var pos = outerArc.centroid(d);\n        var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;\n        pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);\n        return \"translate(\".concat(pos, \")\");\n      }).style('text-anchor', function (d) {\n        var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2;\n        return midangle < Math.PI ? 'start' : 'end';\n      }); //     const svgContainer = d3.select(this.chRef.current).node();\n      //     const width  = svgContainer.getBoundingClientRect().width;\n      //     const height = width;\n      //     const margin = 15;\n      //     let radius = Math.min(width, height) / 2  - margin;\n      //     // legend Position\n      //     let legendPosition = d3.arc().innerRadius(radius/1.75).outerRadius(radius);\n      //     // Create SVG\n      //     const svg  = d3.select(this.chRef.current)\n      //     .append('svg')\n      //     .attr(\"width\", '50%')\n      //     .attr(\"height\", '50%')\n      //         .attr('viewBox', '0 0 ' + width + ' ' + width )\n      //     //.attr('preserveAspectRatio','xMinYMin')\n      //     .append(\"g\")\n      //     .attr(\"transform\", \"translate(\" + Math.min(width,height) / 2 + \",\" + Math.min(width,height) / 2 + \")\");\n      //     let pie = d3.pie()\n      //         .value( d => d.percentage )\n      //     let data_ready = pie(data)\n      //     // Donut partition  \n      //     svg\n      //     .selectAll('whatever')\n      //     .data(data_ready)\n      //     .enter()\n      //     .append('path')\n      //     .attr('d', d3.arc()\n      //         .innerRadius(radius/ 1.75)  // This is the size of the donut hole\n      //         .outerRadius(radius)\n      //     )\n      //     .attr('fill',  (d) =>  colors[d.index] )\n      //     .attr(\"stroke\", \"#fff\")\n      //     .style(\"stroke-width\", \"2\")\n      //     .style(\"opacity\", \"0.8\")\n      //   // Legend group and legend name\n      //    svg\n      //     .selectAll('mySlices')\n      //     .data(data_ready)\n      //     .enter()\n      //     .append('g')\n      //     .attr(\"transform\", d => `translate(${legendPosition.centroid(d)})`)\n      //     .attr(\"class\", 'legend-g')\n      //     .style(\"user-select\", \"none\")\n      //     .append('text')\n      //     .text(d =>  d.data.province)\n      //     .style(\"text-anchor\", \"middle\")\n      //     .style(\"font-weight\", 700)\n      //     .style(\"fill\", '#222')\n      //     .style(\"font-size\", 14);\n      //    //Label for value\n      //     svg\n      //     .selectAll('.legend-g')\n      //     .append('text')\n      //     .text((d)=>{ return  d.data.percentage})\n      //     .style(\"fill\", '#444')\n      //     .style(\"font-size\", 12)\n      //     .style(\"text-anchor\", \"middle\")\n      //     .attr(\"y\", 16 );\n      // // set the dimensions and margins of the graph\n      // var width = 450, height = 450, margin = 40\n      // // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n      // var radius = Math.min(width, height) / 2 - margin\n      // // append the svg object to the div called 'my_dataviz'\n      // var svg = d3.select(this.chRef.current)\n      // .append(\"svg\")\n      // .attr(\"width\", width)\n      // .attr(\"height\", height)\n      // .append(\"g\")\n      // .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n      // // set the color scale\n      // var color = d3.scaleOrdinal()\n      // .domain(data)\n      // .range(['#8ce8ad', '#57e188', '#34c768', '#2db757', '#27acaa', '#42c9c2', '#60e6e1', '#93f0e6', '#87d3f2', '#4ebeeb', '#35a4e8', '#188ce5', '#542ea5', '#724bc3', '#9c82d4', '#c981b2', '#b14891', '#ff6d00', '#ff810a', '#ff9831', '#ffb46a', '#ff9a91', '#ff736a', '#f95d54', '#ff4136', '#c4c4cd' ])\n      // // Compute the position of each group on the pie:\n      // var pie = d3.pie()\n      // .value(function(d) { return d.percentage; })\n      // var data_ready = pie(data)\n      // // console.log(data_ready)\n      // // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n      // svg\n      // .selectAll('whatever')\n      // .data(data_ready)\n      // .enter()\n      // .append('path')\n      // .attr('d', d3.arc()\n      // .innerRadius(100)         // This is the size of the donut hole\n      // .outerRadius(radius)\n      // )\n      // .attr('fill', function(d){ return(color(d.data.province)) })\n      // .attr(\"stroke\", \"black\")\n      // .style(\"stroke-width\", \"2px\")\n      // .style(\"opacity\", 0.7)\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.chRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"script\", {\n        src: \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3/dist/d3.js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(\"script\", {\n        src: \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3moji/d3moji.js\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return DonutChart;\n}(Component);\n\nexport default DonutChart;","map":{"version":3,"sources":["/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/src/components/donutChart.js"],"names":["React","Component","d3","d3moji","colors","DonutChart","props","chRef","createRef","drawChart","width","height","margin","radius","Math","min","svg","select","append","attr","data","color","scaleOrdinal","domain","d","range","schemeDark2","pie","sort","value","data_ready","Object","entries","arc","innerRadius","outerRadius","outerArc","selectAll","join","style","posA","centroid","posB","posC","midangle","startAngle","endAngle","PI","text","pos"],"mappings":"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QAAQ,GAAG9B,IAAI,CAACiC,EAAhB,GAAqB,OAArB,GAA+B,KAAvC;AACH,OAdL,EAxEO,CA2FX;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAII;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;;WAED,kBAAS;AACL,0BAAO,uDACH;AAAK,QAAA,GAAG,EAAE,KAAKxC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADG,eAEH;AAAQ,QAAA,GAAG,EAAC,4FAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFG,eAGH;AAAQ,QAAA,GAAG,EAAC,+FAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHG,CAAP;AAMH;;;;EA1NoBN,S;;AA6NzB,eAAeI,UAAf","sourcesContent":["import React , { Component} from 'react';\nimport * as d3 from 'd3';\nimport d3moji from 'd3moji'\nconst colors = [ '#8ce8ad', '#57e188', '#34c768', '#2db757', '#27acaa', '#42c9c2', '#60e6e1', '#93f0e6', '#87d3f2', '#4ebeeb', '#35a4e8', '#188ce5', '#542ea5', '#724bc3', '#9c82d4', '#c981b2', '#b14891', '#ff6d00', '#ff810a', '#ff9831', '#ffb46a', '#ff9a91', '#ff736a', '#f95d54', '#ff4136', '#c4c4cd' ];\n \nclass DonutChart extends Component {\n\n    constructor(props) {\n        super(props);\n        this.chRef = React.createRef();\n    }\n \n    // Chart load after component Mount\n    componentDidMount() {\n        this.drawChart()\n    }\n \n    // DrawChart\n    drawChart(){\n\n        // set the dimensions and margins of the graph\n        const width = 450,\n        height = 450,\n        margin = 40;\n\n        // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n        const radius = Math.min(width, height) / 2 - margin\n\n        // append the svg object to the div called 'my_dataviz'\n        const svg = d3.select(\"#my_dataviz\")\n        .append(\"svg\")\n        .attr(\"width\", width)\n        .attr(\"height\", height)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${width/2},${height/2})`);\n\n        // Create dummy data\n        const {data} = this.props;\n        // console.log(data)\n\n        // set the color scale\n        const color = d3.scaleOrdinal()\n        .domain(d => color(d.data[1]))\n        .range(d3.schemeDark2);\n\n        // Compute the position of each group on the pie:\n        const pie = d3.pie()\n        .sort(null) // Do not sort group by size\n        .value(d => d[1])\n        const data_ready = pie(Object.entries(data))\n\n        // The arc generator\n        const arc = d3.arc()\n        .innerRadius(radius * 0.5)         // This is the size of the donut hole\n        .outerRadius(radius * 0.8)\n\n        // Another arc that won't be drawn. Just for labels positioning\n        const outerArc = d3.arc()\n        .innerRadius(radius * 0.9)\n        .outerRadius(radius * 0.9)\n\n        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n        svg\n        .selectAll('allSlices')\n        .data(data_ready)\n        .join('path')\n        .attr('d', arc)\n        .attr('fill', d => color(d.data[1]))\n        .attr(\"stroke\", \"white\")\n        .style(\"stroke-width\", \"2px\")\n        .style(\"opacity\", 0.7)\n\n        // Add the polylines between chart and labels:\n        svg\n        .selectAll('allPolylines')\n        .data(data_ready)\n        .join('polyline')\n            .attr(\"stroke\", \"black\")\n            .style(\"fill\", \"none\")\n            .attr(\"stroke-width\", 1)\n            .attr('points', function(d) {\n            const posA = arc.centroid(d) // line insertion in the slice\n            const posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that\n            const posC = outerArc.centroid(d); // Label position = almost the same as posB\n            const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left\n            posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left\n            return [posA, posB, posC]\n            })\n\n        // Add the polylines between chart and labels:\n        svg\n        .selectAll('allLabels')\n        .data(data_ready)\n        .join('text')\n            .text(d => d.data[0])\n            .attr('transform', function(d) {\n                const pos = outerArc.centroid(d);\n                const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n                pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);\n                return `translate(${pos})`;\n            })\n            .style('text-anchor', function(d) {\n                const midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n                return (midangle < Math.PI ? 'start' : 'end')\n            })\n\n\n\n\n    //     const svgContainer = d3.select(this.chRef.current).node();\n    //     const width  = svgContainer.getBoundingClientRect().width;\n    //     const height = width;\n    //     const margin = 15;\n    //     let radius = Math.min(width, height) / 2  - margin;\n    //     // legend Position\n    //     let legendPosition = d3.arc().innerRadius(radius/1.75).outerRadius(radius);\n \n    //     // Create SVG\n    //     const svg  = d3.select(this.chRef.current)\n    //     .append('svg')\n    //     .attr(\"width\", '50%')\n    //     .attr(\"height\", '50%')\n    //         .attr('viewBox', '0 0 ' + width + ' ' + width )\n    //     //.attr('preserveAspectRatio','xMinYMin')\n    //     .append(\"g\")\n    //     .attr(\"transform\", \"translate(\" + Math.min(width,height) / 2 + \",\" + Math.min(width,height) / 2 + \")\");\n \n    //     let pie = d3.pie()\n    //         .value( d => d.percentage )\n    //     let data_ready = pie(data)\n \n    //     // Donut partition  \n    //     svg\n    //     .selectAll('whatever')\n    //     .data(data_ready)\n    //     .enter()\n    //     .append('path')\n    //     .attr('d', d3.arc()\n    //         .innerRadius(radius/ 1.75)  // This is the size of the donut hole\n    //         .outerRadius(radius)\n    //     )\n    //     .attr('fill',  (d) =>  colors[d.index] )\n    //     .attr(\"stroke\", \"#fff\")\n    //     .style(\"stroke-width\", \"2\")\n    //     .style(\"opacity\", \"0.8\")\n \n \n    //   // Legend group and legend name\n    //    svg\n    //     .selectAll('mySlices')\n    //     .data(data_ready)\n    //     .enter()\n    //     .append('g')\n    //     .attr(\"transform\", d => `translate(${legendPosition.centroid(d)})`)\n    //     .attr(\"class\", 'legend-g')\n    //     .style(\"user-select\", \"none\")\n    //     .append('text')\n    //     .text(d =>  d.data.province)\n    //     .style(\"text-anchor\", \"middle\")\n    //     .style(\"font-weight\", 700)\n    //     .style(\"fill\", '#222')\n    //     .style(\"font-size\", 14);\n \n    //    //Label for value\n    //     svg\n    //     .selectAll('.legend-g')\n    //     .append('text')\n    //     .text((d)=>{ return  d.data.percentage})\n    //     .style(\"fill\", '#444')\n    //     .style(\"font-size\", 12)\n    //     .style(\"text-anchor\", \"middle\")\n    //     .attr(\"y\", 16 );\n\n\n\n        // // set the dimensions and margins of the graph\n        // var width = 450, height = 450, margin = 40\n\n        // // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n        // var radius = Math.min(width, height) / 2 - margin\n\n        // // append the svg object to the div called 'my_dataviz'\n        // var svg = d3.select(this.chRef.current)\n        // .append(\"svg\")\n        // .attr(\"width\", width)\n        // .attr(\"height\", height)\n        // .append(\"g\")\n        // .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n\n\n        // // set the color scale\n        // var color = d3.scaleOrdinal()\n        // .domain(data)\n        // .range(['#8ce8ad', '#57e188', '#34c768', '#2db757', '#27acaa', '#42c9c2', '#60e6e1', '#93f0e6', '#87d3f2', '#4ebeeb', '#35a4e8', '#188ce5', '#542ea5', '#724bc3', '#9c82d4', '#c981b2', '#b14891', '#ff6d00', '#ff810a', '#ff9831', '#ffb46a', '#ff9a91', '#ff736a', '#f95d54', '#ff4136', '#c4c4cd' ])\n\n        // // Compute the position of each group on the pie:\n        // var pie = d3.pie()\n        // .value(function(d) { return d.percentage; })\n        // var data_ready = pie(data)\n        // // console.log(data_ready)\n        // // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n        // svg\n        // .selectAll('whatever')\n        // .data(data_ready)\n        // .enter()\n        // .append('path')\n        // .attr('d', d3.arc()\n        // .innerRadius(100)         // This is the size of the donut hole\n        // .outerRadius(radius)\n        // )\n        // .attr('fill', function(d){ return(color(d.data.province)) })\n        // .attr(\"stroke\", \"black\")\n        // .style(\"stroke-width\", \"2px\")\n        // .style(\"opacity\", 0.7)\n    } \n \n    render() {\n        return <>\n            <div ref={this.chRef}></div> \n            <script src=\"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3/dist/d3.js\"></script>\n            <script src=\"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3moji/d3moji.js\"></script>\n            \n        </>\n    }\n}\n \nexport default DonutChart;\n"]},"metadata":{},"sourceType":"module"}