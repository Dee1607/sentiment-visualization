{"ast":null,"code":"import _slicedToArray from \"/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { slice } from \"./array.js\";\nimport bisect from \"./bisect.js\";\nimport constant from \"./constant.js\";\nimport extent from \"./extent.js\";\nimport identity from \"./identity.js\";\nimport nice from \"./nice.js\";\nimport ticks, { tickIncrement } from \"./ticks.js\";\nimport sturges from \"./threshold/sturges.js\";\nexport default function bin() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n    var i,\n        n = data.length,\n        x,\n        step,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1); // Convert number of thresholds into uniform thresholds, and nice the\n    // default domain accordingly.\n\n    if (!Array.isArray(tz)) {\n      var max = x1,\n          tn = +tz;\n\n      if (domain === extent) {\n        var _nice = nice(x0, x1, tn);\n\n        var _nice2 = _slicedToArray(_nice, 2);\n\n        x0 = _nice2[0];\n        x1 = _nice2[1];\n      }\n\n      tz = ticks(x0, x1, tn); // If the domain is aligned with the first tick (which it will by\n      // default), then we can use quantization rather than bisection to bin\n      // values, which is substantially faster.\n\n      if (tz[0] <= x0) step = tickIncrement(x0, x1, tn); // If the last threshold is coincident with the domain’s upper bound, the\n      // last bin will be zero-width. If the default domain is used, and this\n      // last threshold is coincident with the maximum input value, we can\n      // extend the niced upper bound by one tick to ensure uniform bin widths;\n      // otherwise, we simply remove the last threshold. Note that we don’t\n      // coerce values or the domain to numbers, and thus must be careful to\n      // compare order (>=) rather than strict equality (===)!\n\n      if (tz[tz.length - 1] >= x1) {\n        if (max >= x1 && domain === extent) {\n          var _step = tickIncrement(x0, x1, tn);\n\n          if (isFinite(_step)) {\n            if (_step > 0) {\n              x1 = (Math.floor(x1 / _step) + 1) * _step;\n            } else if (_step < 0) {\n              x1 = (Math.ceil(x1 * -_step) + 1) / -_step;\n            }\n          }\n        } else {\n          tz.pop();\n        }\n      }\n    } // Remove any thresholds outside the domain.\n\n\n    var m = tz.length;\n\n    while (tz[0] <= x0) {\n      tz.shift(), --m;\n    }\n\n    while (tz[m - 1] > x1) {\n      tz.pop(), --m;\n    }\n\n    var bins = new Array(m + 1),\n        bin; // Initialize bins.\n\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    } // Assign data to bins by value, ignoring any outside the domain.\n\n\n    if (isFinite(step)) {\n      if (step > 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            bins[Math.floor((x - x0) / step)].push(data[i]);\n          }\n        }\n      } else if (step < 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            var j = Math.floor((x0 - x) * step);\n            bins[j + (tz[j] <= x)].push(data[i]); // handle off-by-one due to rounding\n          }\n        }\n      }\n    } else {\n      for (i = 0; i < n; ++i) {\n        if ((x = values[i]) != null && x0 <= x && x <= x1) {\n          bins[bisect(tz, x, 0, m)].push(data[i]);\n        }\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function (_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function (_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function (_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n}","map":{"version":3,"sources":["/Users/deeppatel/Desktop/Visualization/Project/csci6406_project/node_modules/d3-array/src/bin.js"],"names":["slice","bisect","constant","extent","identity","nice","ticks","tickIncrement","sturges","bin","value","domain","threshold","histogram","data","Array","isArray","from","i","n","length","x","step","values","xz","x0","x1","tz","max","tn","isFinite","Math","floor","ceil","pop","m","shift","bins","push","j","_","arguments","thresholds","call"],"mappings":"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","sourcesContent":["import {slice} from \"./array.js\";\nimport bisect from \"./bisect.js\";\nimport constant from \"./constant.js\";\nimport extent from \"./extent.js\";\nimport identity from \"./identity.js\";\nimport nice from \"./nice.js\";\nimport ticks, {tickIncrement} from \"./ticks.js\";\nimport sturges from \"./threshold/sturges.js\";\n\nexport default function bin() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n\n    var i,\n        n = data.length,\n        x,\n        step,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds, and nice the\n    // default domain accordingly.\n    if (!Array.isArray(tz)) {\n      const max = x1, tn = +tz;\n      if (domain === extent) [x0, x1] = nice(x0, x1, tn);\n      tz = ticks(x0, x1, tn);\n\n      // If the domain is aligned with the first tick (which it will by\n      // default), then we can use quantization rather than bisection to bin\n      // values, which is substantially faster.\n      if (tz[0] <= x0) step = tickIncrement(x0, x1, tn);\n\n      // If the last threshold is coincident with the domain’s upper bound, the\n      // last bin will be zero-width. If the default domain is used, and this\n      // last threshold is coincident with the maximum input value, we can\n      // extend the niced upper bound by one tick to ensure uniform bin widths;\n      // otherwise, we simply remove the last threshold. Note that we don’t\n      // coerce values or the domain to numbers, and thus must be careful to\n      // compare order (>=) rather than strict equality (===)!\n      if (tz[tz.length - 1] >= x1) {\n        if (max >= x1 && domain === extent) {\n          const step = tickIncrement(x0, x1, tn);\n          if (isFinite(step)) {\n            if (step > 0) {\n              x1 = (Math.floor(x1 / step) + 1) * step;\n            } else if (step < 0) {\n              x1 = (Math.ceil(x1 * -step) + 1) / -step;\n            }\n          }\n        } else {\n          tz.pop();\n        }\n      }\n    }\n\n    // Remove any thresholds outside the domain.\n    var m = tz.length;\n    while (tz[0] <= x0) tz.shift(), --m;\n    while (tz[m - 1] > x1) tz.pop(), --m;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    if (isFinite(step)) {\n      if (step > 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            bins[Math.floor((x - x0) / step)].push(data[i]);\n          }\n        }\n      } else if (step < 0) {\n        for (i = 0; i < n; ++i) {\n          if ((x = values[i]) != null && x0 <= x && x <= x1) {\n            const j = Math.floor((x0 - x) * step);\n            bins[j + (tz[j] <= x)].push(data[i]); // handle off-by-one due to rounding\n          }\n        }\n      }\n    } else {\n      for (i = 0; i < n; ++i) {\n        if ((x = values[i]) != null && x0 <= x && x <= x1) {\n          bins[bisect(tz, x, 0, m)].push(data[i]);\n        }\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n}\n"]},"metadata":{},"sourceType":"module"}